{
  "openapi": "3.1.0",
  "info": {
    "title": "Walrus Aggregator",
    "description": "",
    "contact": {
      "name": "Mysten Labs",
      "email": "build@mystenlabs.com"
    },
    "license": {
      "name": "Apache-2.0",
      "identifier": "Apache-2.0"
    },
    "version": "1.18.2"
  },
  "paths": {
    "/v1/blobs/by-object-id/{blob_object_id}": {
      "get": {
        "tags": [
          "routes"
        ],
        "summary": "Retrieve a Walrus blob with its associated attribute.",
        "description": "First retrieves the blob metadata from Sui using the provided blob object ID, then uses the\nblob_id from that metadata to fetch the actual blob data via the get_blob function. The response\nincludes the binary data along with any attribute headers from the metadata that are present in\nthe configured allowed_headers set.",
        "operationId": "get_blob_by_object_id",
        "parameters": [
          {
            "name": "blob_object_id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ObjectID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The blob was reconstructed successfully. Any attribute headers present in the allowed_headers configuration will be included in the response.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int32",
                    "minimum": 0
                  }
                }
              }
            }
          },
          "404": {
            "description": " The requested blob has not yet been stored on Walrus.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          },
          "451": {
            "description": " The blob cannot be returned as has been blocked.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error has occurred. Please report this error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/v1/blobs/{blob_id}": {
      "get": {
        "tags": [
          "routes"
        ],
        "summary": "Retrieve a Walrus blob.",
        "description": "Reconstructs the blob identified by the provided blob ID from Walrus and return it binary data.",
        "operationId": "get_blob",
        "parameters": [
          {
            "name": "blob_id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/BlobId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The blob was reconstructed successfully",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int32",
                    "minimum": 0
                  }
                }
              }
            }
          },
          "404": {
            "description": " The requested blob has not yet been stored on Walrus.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          },
          "451": {
            "description": " The blob cannot be returned as has been blocked.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error has occurred. Please report this error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "BlobId": {
        "type": "string",
        "format": "byte",
        "description": "The ID of a blob.",
        "examples": [
          "E7_nNXvFU_3qZVu3OH1yycRG7LZlyn1-UxEDCDDqGGU"
        ]
      },
      "Status": {
        "type": "object",
        "description": "A message returned from a failed API call.\n\nContains both human-readable and machine-readable details of the error,\nto assist in resolving the error.",
        "required": [
          "error"
        ],
        "properties": {
          "error": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "type": "object",
                    "required": [
                      "status",
                      "code"
                    ],
                    "properties": {
                      "code": {
                        "type": "integer",
                        "format": "int32",
                        "description": "HTTP status code associated with the error.",
                        "minimum": 0
                      },
                      "status": {
                        "type": "string",
                        "description": "General type of error, given as an UPPER_SNAKE_CASE string."
                      }
                    }
                  }
                ],
                "description": "The status code corresponding to the error."
              },
              {
                "type": "object",
                "required": [
                  "message",
                  "details"
                ],
                "properties": {
                  "details": {
                    "type": "array",
                    "items": {
                      "type": "object"
                    },
                    "description": "Machine readable details of the error.\n\nAlways contains an [`ErrorInfo`], which provides a machine-readable\nrepresentation of the of the `message` field."
                  },
                  "message": {
                    "type": "string",
                    "description": "A message describing the error in detail."
                  }
                }
              }
            ]
          }
        }
      }
    }
  }
}