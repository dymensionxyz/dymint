{
  "openapi": "3.1.0",
  "info": {
    "title": "Walrus Publisher",
    "description": "",
    "contact": {
      "name": "Mysten Labs",
      "email": "build@mystenlabs.com"
    },
    "license": {
      "name": "Apache-2.0",
      "identifier": "Apache-2.0"
    },
    "version": "1.18.2"
  },
  "paths": {
    "/v1/blobs": {
      "put": {
        "tags": [
          "routes"
        ],
        "summary": "Store a blob on Walrus.",
        "description": "Store a (potentially deletable) blob on Walrus for 1 or more epochs. The associated on-Sui\nobject can be sent to a specified Sui address.",
        "operationId": "put_blob",
        "parameters": [
          {
            "name": "encoding_type",
            "in": "query",
            "description": "The encoding type to use for the blob.",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "$ref": "#/components/schemas/EncodingType"
                }
              ]
            }
          },
          {
            "name": "epochs",
            "in": "query",
            "description": "The number of epochs, ahead of the current one, for which to store the blob.\n\nThe default is 1 epoch.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/u32"
            }
          },
          {
            "name": "deletable",
            "in": "query",
            "description": "If true, the publisher creates a deletable blob instead of a permanent one.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "send_object_to",
            "in": "query",
            "description": "If specified, the publisher will send the Blob object resulting from the store operation to\nthis Sui address.",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "$ref": "#/components/schemas/SuiAddress"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "description": "Binary data of the unencoded blob to be stored.",
          "content": {
            "application/octet-stream": {
              "schema": {
                "$ref": "#/components/schemas/Binary"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The blob was stored successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlobStoreResult"
                }
              }
            }
          },
          "400": {
            "description": "The request is malformed"
          },
          "413": {
            "description": "The blob is too large"
          },
          "451": {
            "description": " The blob cannot be returned as has been blocked.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error has occurred. Please report this error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          },
          "504": {
            "description": " The service failed to store the blob to sufficient Walrus storage nodes before a timeout, please retry the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Binary": {
        "type": "string",
        "format": "binary"
      },
      "Blob": {
        "type": "object",
        "description": "Sui object for a blob.",
        "required": [
          "id",
          "registeredEpoch",
          "blobId",
          "size",
          "encodingType",
          "storage",
          "deletable"
        ],
        "properties": {
          "blobId": {
            "$ref": "#/components/schemas/BlobId",
            "description": "The blob ID."
          },
          "certifiedEpoch": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/u32",
                "description": "The epoch in which the blob was first certified, `None` if the blob is uncertified."
              }
            ]
          },
          "deletable": {
            "type": "boolean",
            "description": "Marks the blob as deletable."
          },
          "encodingType": {
            "$ref": "#/components/schemas/EncodingType",
            "description": "The encoding coding type used for the blob."
          },
          "id": {
            "$ref": "#/components/schemas/ObjectID"
          },
          "registeredEpoch": {
            "$ref": "#/components/schemas/u32",
            "description": "The epoch in which the blob has been registered."
          },
          "size": {
            "type": "integer",
            "format": "int64",
            "description": "The (unencoded) size of the blob.",
            "minimum": 0
          },
          "storage": {
            "$ref": "#/components/schemas/StorageResource",
            "description": "The [`StorageResource`] used to store the blob."
          }
        }
      },
      "BlobId": {
        "type": "string",
        "format": "byte",
        "description": "The ID of a blob.",
        "examples": [
          "E7_nNXvFU_3qZVu3OH1yycRG7LZlyn1-UxEDCDDqGGU"
        ]
      },
      "BlobStoreResult": {
        "oneOf": [
          {
            "type": "object",
            "description": "The blob already exists within Walrus, was certified, and is stored for at least the\nintended duration.",
            "required": [
              "alreadyCertified"
            ],
            "properties": {
              "alreadyCertified": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EventOrObjectId",
                    "description": "The event where the blob was certified, or the object ID of the registered blob.\n\nThe object ID of the registered blob is used in place of the event ID when the blob is\ndeletable, already certified, and owned by the client."
                  },
                  {
                    "type": "object",
                    "required": [
                      "blob_id",
                      "end_epoch"
                    ],
                    "properties": {
                      "blob_id": {
                        "$ref": "#/components/schemas/BlobId",
                        "description": "The blob ID."
                      },
                      "end_epoch": {
                        "type": "integer",
                        "format": "int64",
                        "description": "The epoch until which the blob is stored (exclusive).",
                        "minimum": 0
                      }
                    }
                  }
                ],
                "description": "The blob already exists within Walrus, was certified, and is stored for at least the\nintended duration."
              }
            }
          },
          {
            "type": "object",
            "description": "The blob was newly created; this contains the newly created Sui object associated with the\nblob.",
            "required": [
              "newlyCreated"
            ],
            "properties": {
              "newlyCreated": {
                "type": "object",
                "description": "The blob was newly created; this contains the newly created Sui object associated with the\nblob.",
                "required": [
                  "blob_object",
                  "resource_operation",
                  "cost"
                ],
                "properties": {
                  "blob_object": {
                    "$ref": "#/components/schemas/Blob",
                    "description": "The Sui blob object that holds the newly created blob."
                  },
                  "cost": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The storage cost, excluding gas.",
                    "minimum": 0
                  },
                  "resource_operation": {
                    "$ref": "#/components/schemas/RegisterBlobOp",
                    "description": "The operation that created the blob."
                  },
                  "shared_blob_object": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "$ref": "#/components/schemas/ObjectID",
                        "description": "The shared blob object ID if created."
                      }
                    ]
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "description": "The blob is known to Walrus but was marked as invalid.\n\nThis indicates a bug within the client, the storage nodes, or more than a third malicious\nstorage nodes.",
            "required": [
              "markedInvalid"
            ],
            "properties": {
              "markedInvalid": {
                "type": "object",
                "description": "The blob is known to Walrus but was marked as invalid.\n\nThis indicates a bug within the client, the storage nodes, or more than a third malicious\nstorage nodes.",
                "required": [
                  "blob_id",
                  "event"
                ],
                "properties": {
                  "blob_id": {
                    "$ref": "#/components/schemas/BlobId",
                    "description": "The blob ID."
                  },
                  "event": {
                    "$ref": "#/components/schemas/EventID",
                    "description": "The event where the blob was marked as invalid."
                  }
                }
              }
            }
          }
        ],
        "description": "Result when attempting to store a blob."
      },
      "EncodingType": {
        "type": "string",
        "description": "Supported Walrus encoding types.",
        "enum": [
          "RedStuffRaptorQ",
          "RS2"
        ]
      },
      "Epoch": {
        "type": "integer",
        "format": "int32",
        "description": "Walrus epoch.",
        "minimum": 0
      },
      "EventID": {
        "type": "object",
        "description": "Schema for the [`sui_types::event::EventID`] type.",
        "required": [
          "txDigest",
          "eventSeq"
        ],
        "properties": {
          "eventSeq": {
            "type": "string"
          },
          "txDigest": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "byte",
              "minimum": 0
            }
          }
        },
        "examples": [
          {
            "txDigest": "EhtoQF9UpPyg5PsPUs69LdkcRrjQ3R4cTsHnwxZVTNrC",
            "eventSeq": 0
          }
        ]
      },
      "EventOrObjectId": {
        "oneOf": [
          {
            "type": "object",
            "description": "The variant representing an event ID.",
            "required": [
              "event"
            ],
            "properties": {
              "event": {
                "$ref": "#/components/schemas/EventID",
                "description": "The variant representing an event ID."
              }
            }
          },
          {
            "type": "object",
            "description": "The variant representing an object ID.",
            "required": [
              "object"
            ],
            "properties": {
              "object": {
                "$ref": "#/components/schemas/ObjectID",
                "description": "The variant representing an object ID."
              }
            }
          }
        ],
        "description": "Either an event ID or an object ID."
      },
      "ObjectID": {
        "type": "string",
        "title": "Sui object ID",
        "description": "Sui object ID as a hexadecimal string",
        "examples": [
          "0x56ae1c86e17db174ea002f8340e28880bc8a8587c56e8604a4fa6b1170b23a60"
        ]
      },
      "RegisterBlobOp": {
        "oneOf": [
          {
            "type": "object",
            "description": "The storage and blob resources are purchased from scratch.",
            "required": [
              "registerFromScratch"
            ],
            "properties": {
              "registerFromScratch": {
                "type": "object",
                "description": "The storage and blob resources are purchased from scratch.",
                "required": [
                  "encoded_length",
                  "epochs_ahead"
                ],
                "properties": {
                  "encoded_length": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "epochs_ahead": {
                    "type": "integer",
                    "format": "int32",
                    "minimum": 0
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "description": "The storage is reused, but the blob was not registered.",
            "required": [
              "reuseStorage"
            ],
            "properties": {
              "reuseStorage": {
                "type": "object",
                "description": "The storage is reused, but the blob was not registered.",
                "required": [
                  "encoded_length"
                ],
                "properties": {
                  "encoded_length": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "description": "A registration was already present.",
            "required": [
              "reuseRegistration"
            ],
            "properties": {
              "reuseRegistration": {
                "type": "object",
                "description": "A registration was already present.",
                "required": [
                  "encoded_length"
                ],
                "properties": {
                  "encoded_length": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "description": "The blob was already certified, but its lifetime is too short.",
            "required": [
              "reuseAndExtend"
            ],
            "properties": {
              "reuseAndExtend": {
                "type": "object",
                "description": "The blob was already certified, but its lifetime is too short.",
                "required": [
                  "encoded_length",
                  "epochs_extended"
                ],
                "properties": {
                  "encoded_length": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "epochs_extended": {
                    "type": "integer",
                    "format": "int32",
                    "minimum": 0
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "description": "The blob was registered, but not certified, and its lifetime is shorter than\nthe desired one.",
            "required": [
              "reuseAndExtendNonCertified"
            ],
            "properties": {
              "reuseAndExtendNonCertified": {
                "type": "object",
                "description": "The blob was registered, but not certified, and its lifetime is shorter than\nthe desired one.",
                "required": [
                  "encoded_length",
                  "epochs_extended"
                ],
                "properties": {
                  "encoded_length": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "epochs_extended": {
                    "type": "integer",
                    "format": "int32",
                    "minimum": 0
                  }
                }
              }
            }
          }
        ],
        "description": "The operation performed on blob and storage resources to register a blob."
      },
      "Status": {
        "type": "object",
        "description": "A message returned from a failed API call.\n\nContains both human-readable and machine-readable details of the error,\nto assist in resolving the error.",
        "required": [
          "error"
        ],
        "properties": {
          "error": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "type": "object",
                    "required": [
                      "status",
                      "code"
                    ],
                    "properties": {
                      "code": {
                        "type": "integer",
                        "format": "int32",
                        "description": "HTTP status code associated with the error.",
                        "minimum": 0
                      },
                      "status": {
                        "type": "string",
                        "description": "General type of error, given as an UPPER_SNAKE_CASE string."
                      }
                    }
                  }
                ],
                "description": "The status code corresponding to the error."
              },
              {
                "type": "object",
                "required": [
                  "message",
                  "details"
                ],
                "properties": {
                  "details": {
                    "type": "array",
                    "items": {
                      "type": "object"
                    },
                    "description": "Machine readable details of the error.\n\nAlways contains an [`ErrorInfo`], which provides a machine-readable\nrepresentation of the of the `message` field."
                  },
                  "message": {
                    "type": "string",
                    "description": "A message describing the error in detail."
                  }
                }
              }
            ]
          }
        }
      },
      "StorageResource": {
        "type": "object",
        "description": "Sui object for storage resources.",
        "required": [
          "id",
          "startEpoch",
          "endEpoch",
          "storageSize"
        ],
        "properties": {
          "endEpoch": {
            "$ref": "#/components/schemas/u32",
            "description": "The end epoch of the resource (exclusive)."
          },
          "id": {
            "$ref": "#/components/schemas/ObjectID"
          },
          "startEpoch": {
            "$ref": "#/components/schemas/u32",
            "description": "The start epoch of the resource (inclusive)."
          },
          "storageSize": {
            "type": "integer",
            "format": "int64",
            "description": "The total amount of reserved storage.",
            "minimum": 0
          }
        }
      },
      "SuiAddress": {
        "type": "string",
        "title": "Sui address",
        "description": "Sui address encoded as a hexadecimal string",
        "examples": [
          "0x02a212de6a9dfa3a69e22387acfbafbb1a9e591bd9d636e7895dcfc8de0"
        ]
      },
      "u32": {
        "type": "integer",
        "format": "int32",
        "minimum": 0
      }
    }
  }
}