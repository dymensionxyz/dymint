// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package da

import (
	"github.com/dymensionxyz/dymint/store"
	"github.com/dymensionxyz/dymint/types"
	mock "github.com/stretchr/testify/mock"
	"github.com/tendermint/tendermint/libs/pubsub"
)

// NewMockDataAvailabilityLayerClient creates a new instance of MockDataAvailabilityLayerClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDataAvailabilityLayerClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDataAvailabilityLayerClient {
	mock := &MockDataAvailabilityLayerClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDataAvailabilityLayerClient is an autogenerated mock type for the DataAvailabilityLayerClient type
type MockDataAvailabilityLayerClient struct {
	mock.Mock
}

type MockDataAvailabilityLayerClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDataAvailabilityLayerClient) EXPECT() *MockDataAvailabilityLayerClient_Expecter {
	return &MockDataAvailabilityLayerClient_Expecter{mock: &_m.Mock}
}

// CheckBatchAvailability provides a mock function for the type MockDataAvailabilityLayerClient
func (_mock *MockDataAvailabilityLayerClient) CheckBatchAvailability(daPath string) ResultCheckBatch {
	ret := _mock.Called(daPath)

	if len(ret) == 0 {
		panic("no return value specified for CheckBatchAvailability")
	}

	var r0 ResultCheckBatch
	if returnFunc, ok := ret.Get(0).(func(string) ResultCheckBatch); ok {
		r0 = returnFunc(daPath)
	} else {
		r0 = ret.Get(0).(ResultCheckBatch)
	}
	return r0
}

// MockDataAvailabilityLayerClient_CheckBatchAvailability_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckBatchAvailability'
type MockDataAvailabilityLayerClient_CheckBatchAvailability_Call struct {
	*mock.Call
}

// CheckBatchAvailability is a helper method to define mock.On call
//   - daPath string
func (_e *MockDataAvailabilityLayerClient_Expecter) CheckBatchAvailability(daPath interface{}) *MockDataAvailabilityLayerClient_CheckBatchAvailability_Call {
	return &MockDataAvailabilityLayerClient_CheckBatchAvailability_Call{Call: _e.mock.On("CheckBatchAvailability", daPath)}
}

func (_c *MockDataAvailabilityLayerClient_CheckBatchAvailability_Call) Run(run func(daPath string)) *MockDataAvailabilityLayerClient_CheckBatchAvailability_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDataAvailabilityLayerClient_CheckBatchAvailability_Call) Return(resultCheckBatch ResultCheckBatch) *MockDataAvailabilityLayerClient_CheckBatchAvailability_Call {
	_c.Call.Return(resultCheckBatch)
	return _c
}

func (_c *MockDataAvailabilityLayerClient_CheckBatchAvailability_Call) RunAndReturn(run func(daPath string) ResultCheckBatch) *MockDataAvailabilityLayerClient_CheckBatchAvailability_Call {
	_c.Call.Return(run)
	return _c
}

// GetClientType provides a mock function for the type MockDataAvailabilityLayerClient
func (_mock *MockDataAvailabilityLayerClient) GetClientType() Client {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetClientType")
	}

	var r0 Client
	if returnFunc, ok := ret.Get(0).(func() Client); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(Client)
	}
	return r0
}

// MockDataAvailabilityLayerClient_GetClientType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClientType'
type MockDataAvailabilityLayerClient_GetClientType_Call struct {
	*mock.Call
}

// GetClientType is a helper method to define mock.On call
func (_e *MockDataAvailabilityLayerClient_Expecter) GetClientType() *MockDataAvailabilityLayerClient_GetClientType_Call {
	return &MockDataAvailabilityLayerClient_GetClientType_Call{Call: _e.mock.On("GetClientType")}
}

func (_c *MockDataAvailabilityLayerClient_GetClientType_Call) Run(run func()) *MockDataAvailabilityLayerClient_GetClientType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDataAvailabilityLayerClient_GetClientType_Call) Return(client Client) *MockDataAvailabilityLayerClient_GetClientType_Call {
	_c.Call.Return(client)
	return _c
}

func (_c *MockDataAvailabilityLayerClient_GetClientType_Call) RunAndReturn(run func() Client) *MockDataAvailabilityLayerClient_GetClientType_Call {
	_c.Call.Return(run)
	return _c
}

// GetMaxBlobSizeBytes provides a mock function for the type MockDataAvailabilityLayerClient
func (_mock *MockDataAvailabilityLayerClient) GetMaxBlobSizeBytes() uint64 {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMaxBlobSizeBytes")
	}

	var r0 uint64
	if returnFunc, ok := ret.Get(0).(func() uint64); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(uint64)
	}
	return r0
}

// MockDataAvailabilityLayerClient_GetMaxBlobSizeBytes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMaxBlobSizeBytes'
type MockDataAvailabilityLayerClient_GetMaxBlobSizeBytes_Call struct {
	*mock.Call
}

// GetMaxBlobSizeBytes is a helper method to define mock.On call
func (_e *MockDataAvailabilityLayerClient_Expecter) GetMaxBlobSizeBytes() *MockDataAvailabilityLayerClient_GetMaxBlobSizeBytes_Call {
	return &MockDataAvailabilityLayerClient_GetMaxBlobSizeBytes_Call{Call: _e.mock.On("GetMaxBlobSizeBytes")}
}

func (_c *MockDataAvailabilityLayerClient_GetMaxBlobSizeBytes_Call) Run(run func()) *MockDataAvailabilityLayerClient_GetMaxBlobSizeBytes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDataAvailabilityLayerClient_GetMaxBlobSizeBytes_Call) Return(v uint64) *MockDataAvailabilityLayerClient_GetMaxBlobSizeBytes_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *MockDataAvailabilityLayerClient_GetMaxBlobSizeBytes_Call) RunAndReturn(run func() uint64) *MockDataAvailabilityLayerClient_GetMaxBlobSizeBytes_Call {
	_c.Call.Return(run)
	return _c
}

// GetSignerBalance provides a mock function for the type MockDataAvailabilityLayerClient
func (_mock *MockDataAvailabilityLayerClient) GetSignerBalance() (Balance, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSignerBalance")
	}

	var r0 Balance
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (Balance, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() Balance); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(Balance)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDataAvailabilityLayerClient_GetSignerBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSignerBalance'
type MockDataAvailabilityLayerClient_GetSignerBalance_Call struct {
	*mock.Call
}

// GetSignerBalance is a helper method to define mock.On call
func (_e *MockDataAvailabilityLayerClient_Expecter) GetSignerBalance() *MockDataAvailabilityLayerClient_GetSignerBalance_Call {
	return &MockDataAvailabilityLayerClient_GetSignerBalance_Call{Call: _e.mock.On("GetSignerBalance")}
}

func (_c *MockDataAvailabilityLayerClient_GetSignerBalance_Call) Run(run func()) *MockDataAvailabilityLayerClient_GetSignerBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDataAvailabilityLayerClient_GetSignerBalance_Call) Return(balance Balance, err error) *MockDataAvailabilityLayerClient_GetSignerBalance_Call {
	_c.Call.Return(balance, err)
	return _c
}

func (_c *MockDataAvailabilityLayerClient_GetSignerBalance_Call) RunAndReturn(run func() (Balance, error)) *MockDataAvailabilityLayerClient_GetSignerBalance_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function for the type MockDataAvailabilityLayerClient
func (_mock *MockDataAvailabilityLayerClient) Init(config []byte, pubsubServer *pubsub.Server, kvStore store.KV, logger types.Logger, options ...Option) error {
	var tmpRet mock.Arguments
	if len(options) > 0 {
		tmpRet = _mock.Called(config, pubsubServer, kvStore, logger, options)
	} else {
		tmpRet = _mock.Called(config, pubsubServer, kvStore, logger)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func([]byte, *pubsub.Server, store.KV, types.Logger, ...Option) error); ok {
		r0 = returnFunc(config, pubsubServer, kvStore, logger, options...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDataAvailabilityLayerClient_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockDataAvailabilityLayerClient_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - config []byte
//   - pubsubServer *pubsub.Server
//   - kvStore store.KV
//   - logger types.Logger
//   - options ...Option
func (_e *MockDataAvailabilityLayerClient_Expecter) Init(config interface{}, pubsubServer interface{}, kvStore interface{}, logger interface{}, options ...interface{}) *MockDataAvailabilityLayerClient_Init_Call {
	return &MockDataAvailabilityLayerClient_Init_Call{Call: _e.mock.On("Init",
		append([]interface{}{config, pubsubServer, kvStore, logger}, options...)...)}
}

func (_c *MockDataAvailabilityLayerClient_Init_Call) Run(run func(config []byte, pubsubServer *pubsub.Server, kvStore store.KV, logger types.Logger, options ...Option)) *MockDataAvailabilityLayerClient_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []byte
		if args[0] != nil {
			arg0 = args[0].([]byte)
		}
		var arg1 *pubsub.Server
		if args[1] != nil {
			arg1 = args[1].(*pubsub.Server)
		}
		var arg2 store.KV
		if args[2] != nil {
			arg2 = args[2].(store.KV)
		}
		var arg3 types.Logger
		if args[3] != nil {
			arg3 = args[3].(types.Logger)
		}
		var arg4 []Option
		var variadicArgs []Option
		if len(args) > 4 {
			variadicArgs = args[4].([]Option)
		}
		arg4 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4...,
		)
	})
	return _c
}

func (_c *MockDataAvailabilityLayerClient_Init_Call) Return(err error) *MockDataAvailabilityLayerClient_Init_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDataAvailabilityLayerClient_Init_Call) RunAndReturn(run func(config []byte, pubsubServer *pubsub.Server, kvStore store.KV, logger types.Logger, options ...Option) error) *MockDataAvailabilityLayerClient_Init_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveBatches provides a mock function for the type MockDataAvailabilityLayerClient
func (_mock *MockDataAvailabilityLayerClient) RetrieveBatches(daPath string) ResultRetrieveBatch {
	ret := _mock.Called(daPath)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveBatches")
	}

	var r0 ResultRetrieveBatch
	if returnFunc, ok := ret.Get(0).(func(string) ResultRetrieveBatch); ok {
		r0 = returnFunc(daPath)
	} else {
		r0 = ret.Get(0).(ResultRetrieveBatch)
	}
	return r0
}

// MockDataAvailabilityLayerClient_RetrieveBatches_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveBatches'
type MockDataAvailabilityLayerClient_RetrieveBatches_Call struct {
	*mock.Call
}

// RetrieveBatches is a helper method to define mock.On call
//   - daPath string
func (_e *MockDataAvailabilityLayerClient_Expecter) RetrieveBatches(daPath interface{}) *MockDataAvailabilityLayerClient_RetrieveBatches_Call {
	return &MockDataAvailabilityLayerClient_RetrieveBatches_Call{Call: _e.mock.On("RetrieveBatches", daPath)}
}

func (_c *MockDataAvailabilityLayerClient_RetrieveBatches_Call) Run(run func(daPath string)) *MockDataAvailabilityLayerClient_RetrieveBatches_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDataAvailabilityLayerClient_RetrieveBatches_Call) Return(resultRetrieveBatch ResultRetrieveBatch) *MockDataAvailabilityLayerClient_RetrieveBatches_Call {
	_c.Call.Return(resultRetrieveBatch)
	return _c
}

func (_c *MockDataAvailabilityLayerClient_RetrieveBatches_Call) RunAndReturn(run func(daPath string) ResultRetrieveBatch) *MockDataAvailabilityLayerClient_RetrieveBatches_Call {
	_c.Call.Return(run)
	return _c
}

// RollappId provides a mock function for the type MockDataAvailabilityLayerClient
func (_mock *MockDataAvailabilityLayerClient) RollappId() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for RollappId")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockDataAvailabilityLayerClient_RollappId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RollappId'
type MockDataAvailabilityLayerClient_RollappId_Call struct {
	*mock.Call
}

// RollappId is a helper method to define mock.On call
func (_e *MockDataAvailabilityLayerClient_Expecter) RollappId() *MockDataAvailabilityLayerClient_RollappId_Call {
	return &MockDataAvailabilityLayerClient_RollappId_Call{Call: _e.mock.On("RollappId")}
}

func (_c *MockDataAvailabilityLayerClient_RollappId_Call) Run(run func()) *MockDataAvailabilityLayerClient_RollappId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDataAvailabilityLayerClient_RollappId_Call) Return(s string) *MockDataAvailabilityLayerClient_RollappId_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockDataAvailabilityLayerClient_RollappId_Call) RunAndReturn(run func() string) *MockDataAvailabilityLayerClient_RollappId_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function for the type MockDataAvailabilityLayerClient
func (_mock *MockDataAvailabilityLayerClient) Start() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDataAvailabilityLayerClient_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockDataAvailabilityLayerClient_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *MockDataAvailabilityLayerClient_Expecter) Start() *MockDataAvailabilityLayerClient_Start_Call {
	return &MockDataAvailabilityLayerClient_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *MockDataAvailabilityLayerClient_Start_Call) Run(run func()) *MockDataAvailabilityLayerClient_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDataAvailabilityLayerClient_Start_Call) Return(err error) *MockDataAvailabilityLayerClient_Start_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDataAvailabilityLayerClient_Start_Call) RunAndReturn(run func() error) *MockDataAvailabilityLayerClient_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type MockDataAvailabilityLayerClient
func (_mock *MockDataAvailabilityLayerClient) Stop() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDataAvailabilityLayerClient_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockDataAvailabilityLayerClient_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockDataAvailabilityLayerClient_Expecter) Stop() *MockDataAvailabilityLayerClient_Stop_Call {
	return &MockDataAvailabilityLayerClient_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockDataAvailabilityLayerClient_Stop_Call) Run(run func()) *MockDataAvailabilityLayerClient_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDataAvailabilityLayerClient_Stop_Call) Return(err error) *MockDataAvailabilityLayerClient_Stop_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDataAvailabilityLayerClient_Stop_Call) RunAndReturn(run func() error) *MockDataAvailabilityLayerClient_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// SubmitBatch provides a mock function for the type MockDataAvailabilityLayerClient
func (_mock *MockDataAvailabilityLayerClient) SubmitBatch(batch *types.Batch) ResultSubmitBatch {
	ret := _mock.Called(batch)

	if len(ret) == 0 {
		panic("no return value specified for SubmitBatch")
	}

	var r0 ResultSubmitBatch
	if returnFunc, ok := ret.Get(0).(func(*types.Batch) ResultSubmitBatch); ok {
		r0 = returnFunc(batch)
	} else {
		r0 = ret.Get(0).(ResultSubmitBatch)
	}
	return r0
}

// MockDataAvailabilityLayerClient_SubmitBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubmitBatch'
type MockDataAvailabilityLayerClient_SubmitBatch_Call struct {
	*mock.Call
}

// SubmitBatch is a helper method to define mock.On call
//   - batch *types.Batch
func (_e *MockDataAvailabilityLayerClient_Expecter) SubmitBatch(batch interface{}) *MockDataAvailabilityLayerClient_SubmitBatch_Call {
	return &MockDataAvailabilityLayerClient_SubmitBatch_Call{Call: _e.mock.On("SubmitBatch", batch)}
}

func (_c *MockDataAvailabilityLayerClient_SubmitBatch_Call) Run(run func(batch *types.Batch)) *MockDataAvailabilityLayerClient_SubmitBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *types.Batch
		if args[0] != nil {
			arg0 = args[0].(*types.Batch)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDataAvailabilityLayerClient_SubmitBatch_Call) Return(resultSubmitBatch ResultSubmitBatch) *MockDataAvailabilityLayerClient_SubmitBatch_Call {
	_c.Call.Return(resultSubmitBatch)
	return _c
}

func (_c *MockDataAvailabilityLayerClient_SubmitBatch_Call) RunAndReturn(run func(batch *types.Batch) ResultSubmitBatch) *MockDataAvailabilityLayerClient_SubmitBatch_Call {
	_c.Call.Return(run)
	return _c
}
