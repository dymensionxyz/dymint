// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	types "github.com/dymensionxyz/dymension/x/sequencer/types"
)

// SequencerQueryClient is an autogenerated mock type for the QueryClient type
type SequencerQueryClient struct {
	mock.Mock
}

// Params provides a mock function with given fields: ctx, in, opts
func (_m *SequencerQueryClient) Params(ctx context.Context, in *types.QueryParamsRequest, opts ...grpc.CallOption) (*types.QueryParamsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.QueryParamsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryParamsRequest, ...grpc.CallOption) *types.QueryParamsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryParamsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryParamsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Scheduler provides a mock function with given fields: ctx, in, opts
func (_m *SequencerQueryClient) Scheduler(ctx context.Context, in *types.QueryGetSchedulerRequest, opts ...grpc.CallOption) (*types.QueryGetSchedulerResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.QueryGetSchedulerResponse
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetSchedulerRequest, ...grpc.CallOption) *types.QueryGetSchedulerResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryGetSchedulerResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryGetSchedulerRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SchedulerAll provides a mock function with given fields: ctx, in, opts
func (_m *SequencerQueryClient) SchedulerAll(ctx context.Context, in *types.QueryAllSchedulerRequest, opts ...grpc.CallOption) (*types.QueryAllSchedulerResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.QueryAllSchedulerResponse
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryAllSchedulerRequest, ...grpc.CallOption) *types.QueryAllSchedulerResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryAllSchedulerResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryAllSchedulerRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Sequencer provides a mock function with given fields: ctx, in, opts
func (_m *SequencerQueryClient) Sequencer(ctx context.Context, in *types.QueryGetSequencerRequest, opts ...grpc.CallOption) (*types.QueryGetSequencerResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.QueryGetSequencerResponse
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetSequencerRequest, ...grpc.CallOption) *types.QueryGetSequencerResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryGetSequencerResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryGetSequencerRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SequencerAll provides a mock function with given fields: ctx, in, opts
func (_m *SequencerQueryClient) SequencerAll(ctx context.Context, in *types.QueryAllSequencerRequest, opts ...grpc.CallOption) (*types.QueryAllSequencerResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.QueryAllSequencerResponse
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryAllSequencerRequest, ...grpc.CallOption) *types.QueryAllSequencerResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryAllSequencerResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryAllSequencerRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SequencersByRollapp provides a mock function with given fields: ctx, in, opts
func (_m *SequencerQueryClient) SequencersByRollapp(ctx context.Context, in *types.QueryGetSequencersByRollappRequest, opts ...grpc.CallOption) (*types.QueryGetSequencersByRollappResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.QueryGetSequencersByRollappResponse
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetSequencersByRollappRequest, ...grpc.CallOption) *types.QueryGetSequencersByRollappResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryGetSequencersByRollappResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryGetSequencersByRollappRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SequencersByRollappAll provides a mock function with given fields: ctx, in, opts
func (_m *SequencerQueryClient) SequencersByRollappAll(ctx context.Context, in *types.QueryAllSequencersByRollappRequest, opts ...grpc.CallOption) (*types.QueryAllSequencersByRollappResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.QueryAllSequencersByRollappResponse
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryAllSequencersByRollappRequest, ...grpc.CallOption) *types.QueryAllSequencersByRollappResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryAllSequencersByRollappResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryAllSequencersByRollappRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSequencerQueryClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewSequencerQueryClient creates a new instance of SequencerQueryClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSequencerQueryClient(t mockConstructorTestingTNewSequencerQueryClient) *SequencerQueryClient {
	mock := &SequencerQueryClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
