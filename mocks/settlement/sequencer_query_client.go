// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	types "github.com/dymensionxyz/dymension/v3/x/sequencer/types"
)

// SequencerQueryClient is an autogenerated mock type for the SequencerQueryClient type
type SequencerQueryClient struct {
	mock.Mock
}

// Params provides a mock function with given fields: ctx, in, opts
func (_m *SequencerQueryClient) Params(ctx context.Context, in *types.QueryParamsRequest, opts ...grpc.CallOption) (*types.QueryParamsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Params")
	}

	var r0 *types.QueryParamsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryParamsRequest, ...grpc.CallOption) (*types.QueryParamsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryParamsRequest, ...grpc.CallOption) *types.QueryParamsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryParamsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryParamsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Sequencer provides a mock function with given fields: ctx, in, opts
func (_m *SequencerQueryClient) Sequencer(ctx context.Context, in *types.QueryGetSequencerRequest, opts ...grpc.CallOption) (*types.QueryGetSequencerResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Sequencer")
	}

	var r0 *types.QueryGetSequencerResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetSequencerRequest, ...grpc.CallOption) (*types.QueryGetSequencerResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetSequencerRequest, ...grpc.CallOption) *types.QueryGetSequencerResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryGetSequencerResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryGetSequencerRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Sequencers provides a mock function with given fields: ctx, in, opts
func (_m *SequencerQueryClient) Sequencers(ctx context.Context, in *types.QuerySequencersRequest, opts ...grpc.CallOption) (*types.QuerySequencersResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Sequencers")
	}

	var r0 *types.QuerySequencersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QuerySequencersRequest, ...grpc.CallOption) (*types.QuerySequencersResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QuerySequencersRequest, ...grpc.CallOption) *types.QuerySequencersResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QuerySequencersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QuerySequencersRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SequencersByRollapp provides a mock function with given fields: ctx, in, opts
func (_m *SequencerQueryClient) SequencersByRollapp(ctx context.Context, in *types.QueryGetSequencersByRollappRequest, opts ...grpc.CallOption) (*types.QueryGetSequencersByRollappResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SequencersByRollapp")
	}

	var r0 *types.QueryGetSequencersByRollappResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetSequencersByRollappRequest, ...grpc.CallOption) (*types.QueryGetSequencersByRollappResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetSequencersByRollappRequest, ...grpc.CallOption) *types.QueryGetSequencersByRollappResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryGetSequencersByRollappResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryGetSequencersByRollappRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SequencersByRollappByStatus provides a mock function with given fields: ctx, in, opts
func (_m *SequencerQueryClient) SequencersByRollappByStatus(ctx context.Context, in *types.QueryGetSequencersByRollappByStatusRequest, opts ...grpc.CallOption) (*types.QueryGetSequencersByRollappByStatusResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SequencersByRollappByStatus")
	}

	var r0 *types.QueryGetSequencersByRollappByStatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetSequencersByRollappByStatusRequest, ...grpc.CallOption) (*types.QueryGetSequencersByRollappByStatusResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetSequencersByRollappByStatusRequest, ...grpc.CallOption) *types.QueryGetSequencersByRollappByStatusResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryGetSequencersByRollappByStatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryGetSequencersByRollappByStatusRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSequencerQueryClient creates a new instance of SequencerQueryClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSequencerQueryClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *SequencerQueryClient {
	mock := &SequencerQueryClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
