// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	da "github.com/dymensionxyz/dymint/da"
	log "github.com/dymensionxyz/dymint/log"

	mock "github.com/stretchr/testify/mock"

	pubsub "github.com/tendermint/tendermint/libs/pubsub"

	settlement "github.com/dymensionxyz/dymint/settlement"

	types "github.com/dymensionxyz/dymint/types"
)

// LayerI is an autogenerated mock type for the LayerI type
type LayerI struct {
	mock.Mock
}

// GetProposer provides a mock function with given fields:
func (_m *LayerI) GetProposer() *types.Sequencer {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetProposer")
	}

	var r0 *types.Sequencer
	if rf, ok := ret.Get(0).(func() *types.Sequencer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Sequencer)
		}
	}

	return r0
}

// GetSequencersList provides a mock function with given fields:
func (_m *LayerI) GetSequencersList() []*types.Sequencer {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSequencersList")
	}

	var r0 []*types.Sequencer
	if rf, ok := ret.Get(0).(func() []*types.Sequencer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Sequencer)
		}
	}

	return r0
}

// Init provides a mock function with given fields: config, _a1, logger, options
func (_m *LayerI) Init(config settlement.Config, _a1 *pubsub.Server, logger log.Logger, options ...settlement.Option) error {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, config, _a1, logger)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(settlement.Config, *pubsub.Server, log.Logger, ...settlement.Option) error); ok {
		r0 = rf(config, _a1, logger, options...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RetrieveBatch provides a mock function with given fields: stateIndex
func (_m *LayerI) RetrieveBatch(stateIndex ...uint64) (*settlement.ResultRetrieveBatch, error) {
	_va := make([]interface{}, len(stateIndex))
	for _i := range stateIndex {
		_va[_i] = stateIndex[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveBatch")
	}

	var r0 *settlement.ResultRetrieveBatch
	var r1 error
	if rf, ok := ret.Get(0).(func(...uint64) (*settlement.ResultRetrieveBatch, error)); ok {
		return rf(stateIndex...)
	}
	if rf, ok := ret.Get(0).(func(...uint64) *settlement.ResultRetrieveBatch); ok {
		r0 = rf(stateIndex...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settlement.ResultRetrieveBatch)
		}
	}

	if rf, ok := ret.Get(1).(func(...uint64) error); ok {
		r1 = rf(stateIndex...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Start provides a mock function with given fields:
func (_m *LayerI) Start() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields:
func (_m *LayerI) Stop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubmitBatch provides a mock function with given fields: batch, daClient, daResult
func (_m *LayerI) SubmitBatch(batch *types.Batch, daClient da.Client, daResult *da.ResultSubmitBatch) error {
	ret := _m.Called(batch, daClient, daResult)

	if len(ret) == 0 {
		panic("no return value specified for SubmitBatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.Batch, da.Client, *da.ResultSubmitBatch) error); ok {
		r0 = rf(batch, daClient, daResult)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewLayerI creates a new instance of LayerI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLayerI(t interface {
	mock.TestingT
	Cleanup(func())
}) *LayerI {
	mock := &LayerI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
