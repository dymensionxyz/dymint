// Code generated by mockery v2.43.0. DO NOT EDIT.

package types

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	types "github.com/dymensionxyz/dymension/v3/x/rollapp/types"
)

// MockQueryClient is an autogenerated mock type for the QueryClient type
type MockQueryClient struct {
	mock.Mock
}

type MockQueryClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQueryClient) EXPECT() *MockQueryClient_Expecter {
	return &MockQueryClient_Expecter{mock: &_m.Mock}
}

// LatestStateIndex provides a mock function with given fields: ctx, in, opts
func (_m *MockQueryClient) LatestStateIndex(ctx context.Context, in *types.QueryGetLatestStateIndexRequest, opts ...grpc.CallOption) (*types.QueryGetLatestStateIndexResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for LatestStateIndex")
	}

	var r0 *types.QueryGetLatestStateIndexResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetLatestStateIndexRequest, ...grpc.CallOption) (*types.QueryGetLatestStateIndexResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetLatestStateIndexRequest, ...grpc.CallOption) *types.QueryGetLatestStateIndexResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryGetLatestStateIndexResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryGetLatestStateIndexRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueryClient_LatestStateIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LatestStateIndex'
type MockQueryClient_LatestStateIndex_Call struct {
	*mock.Call
}

// LatestStateIndex is a helper method to define mock.On call
//   - ctx context.Context
//   - in *types.QueryGetLatestStateIndexRequest
//   - opts ...grpc.CallOption
func (_e *MockQueryClient_Expecter) LatestStateIndex(ctx interface{}, in interface{}, opts ...interface{}) *MockQueryClient_LatestStateIndex_Call {
	return &MockQueryClient_LatestStateIndex_Call{Call: _e.mock.On("LatestStateIndex",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockQueryClient_LatestStateIndex_Call) Run(run func(ctx context.Context, in *types.QueryGetLatestStateIndexRequest, opts ...grpc.CallOption)) *MockQueryClient_LatestStateIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*types.QueryGetLatestStateIndexRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockQueryClient_LatestStateIndex_Call) Return(_a0 *types.QueryGetLatestStateIndexResponse, _a1 error) *MockQueryClient_LatestStateIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueryClient_LatestStateIndex_Call) RunAndReturn(run func(context.Context, *types.QueryGetLatestStateIndexRequest, ...grpc.CallOption) (*types.QueryGetLatestStateIndexResponse, error)) *MockQueryClient_LatestStateIndex_Call {
	_c.Call.Return(run)
	return _c
}

// Params provides a mock function with given fields: ctx, in, opts
func (_m *MockQueryClient) Params(ctx context.Context, in *types.QueryParamsRequest, opts ...grpc.CallOption) (*types.QueryParamsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Params")
	}

	var r0 *types.QueryParamsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryParamsRequest, ...grpc.CallOption) (*types.QueryParamsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryParamsRequest, ...grpc.CallOption) *types.QueryParamsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryParamsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryParamsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueryClient_Params_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Params'
type MockQueryClient_Params_Call struct {
	*mock.Call
}

// Params is a helper method to define mock.On call
//   - ctx context.Context
//   - in *types.QueryParamsRequest
//   - opts ...grpc.CallOption
func (_e *MockQueryClient_Expecter) Params(ctx interface{}, in interface{}, opts ...interface{}) *MockQueryClient_Params_Call {
	return &MockQueryClient_Params_Call{Call: _e.mock.On("Params",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockQueryClient_Params_Call) Run(run func(ctx context.Context, in *types.QueryParamsRequest, opts ...grpc.CallOption)) *MockQueryClient_Params_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*types.QueryParamsRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockQueryClient_Params_Call) Return(_a0 *types.QueryParamsResponse, _a1 error) *MockQueryClient_Params_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueryClient_Params_Call) RunAndReturn(run func(context.Context, *types.QueryParamsRequest, ...grpc.CallOption) (*types.QueryParamsResponse, error)) *MockQueryClient_Params_Call {
	_c.Call.Return(run)
	return _c
}

// Rollapp provides a mock function with given fields: ctx, in, opts
func (_m *MockQueryClient) Rollapp(ctx context.Context, in *types.QueryGetRollappRequest, opts ...grpc.CallOption) (*types.QueryGetRollappResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Rollapp")
	}

	var r0 *types.QueryGetRollappResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetRollappRequest, ...grpc.CallOption) (*types.QueryGetRollappResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetRollappRequest, ...grpc.CallOption) *types.QueryGetRollappResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryGetRollappResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryGetRollappRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueryClient_Rollapp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rollapp'
type MockQueryClient_Rollapp_Call struct {
	*mock.Call
}

// Rollapp is a helper method to define mock.On call
//   - ctx context.Context
//   - in *types.QueryGetRollappRequest
//   - opts ...grpc.CallOption
func (_e *MockQueryClient_Expecter) Rollapp(ctx interface{}, in interface{}, opts ...interface{}) *MockQueryClient_Rollapp_Call {
	return &MockQueryClient_Rollapp_Call{Call: _e.mock.On("Rollapp",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockQueryClient_Rollapp_Call) Run(run func(ctx context.Context, in *types.QueryGetRollappRequest, opts ...grpc.CallOption)) *MockQueryClient_Rollapp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*types.QueryGetRollappRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockQueryClient_Rollapp_Call) Return(_a0 *types.QueryGetRollappResponse, _a1 error) *MockQueryClient_Rollapp_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueryClient_Rollapp_Call) RunAndReturn(run func(context.Context, *types.QueryGetRollappRequest, ...grpc.CallOption) (*types.QueryGetRollappResponse, error)) *MockQueryClient_Rollapp_Call {
	_c.Call.Return(run)
	return _c
}

// RollappAll provides a mock function with given fields: ctx, in, opts
func (_m *MockQueryClient) RollappAll(ctx context.Context, in *types.QueryAllRollappRequest, opts ...grpc.CallOption) (*types.QueryAllRollappResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RollappAll")
	}

	var r0 *types.QueryAllRollappResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryAllRollappRequest, ...grpc.CallOption) (*types.QueryAllRollappResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryAllRollappRequest, ...grpc.CallOption) *types.QueryAllRollappResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryAllRollappResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryAllRollappRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueryClient_RollappAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RollappAll'
type MockQueryClient_RollappAll_Call struct {
	*mock.Call
}

// RollappAll is a helper method to define mock.On call
//   - ctx context.Context
//   - in *types.QueryAllRollappRequest
//   - opts ...grpc.CallOption
func (_e *MockQueryClient_Expecter) RollappAll(ctx interface{}, in interface{}, opts ...interface{}) *MockQueryClient_RollappAll_Call {
	return &MockQueryClient_RollappAll_Call{Call: _e.mock.On("RollappAll",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockQueryClient_RollappAll_Call) Run(run func(ctx context.Context, in *types.QueryAllRollappRequest, opts ...grpc.CallOption)) *MockQueryClient_RollappAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*types.QueryAllRollappRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockQueryClient_RollappAll_Call) Return(_a0 *types.QueryAllRollappResponse, _a1 error) *MockQueryClient_RollappAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueryClient_RollappAll_Call) RunAndReturn(run func(context.Context, *types.QueryAllRollappRequest, ...grpc.CallOption) (*types.QueryAllRollappResponse, error)) *MockQueryClient_RollappAll_Call {
	_c.Call.Return(run)
	return _c
}

// RollappByEIP155 provides a mock function with given fields: ctx, in, opts
func (_m *MockQueryClient) RollappByEIP155(ctx context.Context, in *types.QueryGetRollappByEIP155Request, opts ...grpc.CallOption) (*types.QueryGetRollappResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RollappByEIP155")
	}

	var r0 *types.QueryGetRollappResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetRollappByEIP155Request, ...grpc.CallOption) (*types.QueryGetRollappResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetRollappByEIP155Request, ...grpc.CallOption) *types.QueryGetRollappResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryGetRollappResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryGetRollappByEIP155Request, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueryClient_RollappByEIP155_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RollappByEIP155'
type MockQueryClient_RollappByEIP155_Call struct {
	*mock.Call
}

// RollappByEIP155 is a helper method to define mock.On call
//   - ctx context.Context
//   - in *types.QueryGetRollappByEIP155Request
//   - opts ...grpc.CallOption
func (_e *MockQueryClient_Expecter) RollappByEIP155(ctx interface{}, in interface{}, opts ...interface{}) *MockQueryClient_RollappByEIP155_Call {
	return &MockQueryClient_RollappByEIP155_Call{Call: _e.mock.On("RollappByEIP155",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockQueryClient_RollappByEIP155_Call) Run(run func(ctx context.Context, in *types.QueryGetRollappByEIP155Request, opts ...grpc.CallOption)) *MockQueryClient_RollappByEIP155_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*types.QueryGetRollappByEIP155Request), variadicArgs...)
	})
	return _c
}

func (_c *MockQueryClient_RollappByEIP155_Call) Return(_a0 *types.QueryGetRollappResponse, _a1 error) *MockQueryClient_RollappByEIP155_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueryClient_RollappByEIP155_Call) RunAndReturn(run func(context.Context, *types.QueryGetRollappByEIP155Request, ...grpc.CallOption) (*types.QueryGetRollappResponse, error)) *MockQueryClient_RollappByEIP155_Call {
	_c.Call.Return(run)
	return _c
}

// StateInfo provides a mock function with given fields: ctx, in, opts
func (_m *MockQueryClient) StateInfo(ctx context.Context, in *types.QueryGetStateInfoRequest, opts ...grpc.CallOption) (*types.QueryGetStateInfoResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StateInfo")
	}

	var r0 *types.QueryGetStateInfoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetStateInfoRequest, ...grpc.CallOption) (*types.QueryGetStateInfoResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetStateInfoRequest, ...grpc.CallOption) *types.QueryGetStateInfoResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryGetStateInfoResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryGetStateInfoRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueryClient_StateInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StateInfo'
type MockQueryClient_StateInfo_Call struct {
	*mock.Call
}

// StateInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - in *types.QueryGetStateInfoRequest
//   - opts ...grpc.CallOption
func (_e *MockQueryClient_Expecter) StateInfo(ctx interface{}, in interface{}, opts ...interface{}) *MockQueryClient_StateInfo_Call {
	return &MockQueryClient_StateInfo_Call{Call: _e.mock.On("StateInfo",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockQueryClient_StateInfo_Call) Run(run func(ctx context.Context, in *types.QueryGetStateInfoRequest, opts ...grpc.CallOption)) *MockQueryClient_StateInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*types.QueryGetStateInfoRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockQueryClient_StateInfo_Call) Return(_a0 *types.QueryGetStateInfoResponse, _a1 error) *MockQueryClient_StateInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueryClient_StateInfo_Call) RunAndReturn(run func(context.Context, *types.QueryGetStateInfoRequest, ...grpc.CallOption) (*types.QueryGetStateInfoResponse, error)) *MockQueryClient_StateInfo_Call {
	_c.Call.Return(run)
	return _c
}

// StateInfoAll provides a mock function with given fields: ctx, in, opts
func (_m *MockQueryClient) StateInfoAll(ctx context.Context, in *types.QueryAllStateInfoRequest, opts ...grpc.CallOption) (*types.QueryAllStateInfoResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StateInfoAll")
	}

	var r0 *types.QueryAllStateInfoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryAllStateInfoRequest, ...grpc.CallOption) (*types.QueryAllStateInfoResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryAllStateInfoRequest, ...grpc.CallOption) *types.QueryAllStateInfoResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryAllStateInfoResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryAllStateInfoRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueryClient_StateInfoAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StateInfoAll'
type MockQueryClient_StateInfoAll_Call struct {
	*mock.Call
}

// StateInfoAll is a helper method to define mock.On call
//   - ctx context.Context
//   - in *types.QueryAllStateInfoRequest
//   - opts ...grpc.CallOption
func (_e *MockQueryClient_Expecter) StateInfoAll(ctx interface{}, in interface{}, opts ...interface{}) *MockQueryClient_StateInfoAll_Call {
	return &MockQueryClient_StateInfoAll_Call{Call: _e.mock.On("StateInfoAll",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockQueryClient_StateInfoAll_Call) Run(run func(ctx context.Context, in *types.QueryAllStateInfoRequest, opts ...grpc.CallOption)) *MockQueryClient_StateInfoAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*types.QueryAllStateInfoRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockQueryClient_StateInfoAll_Call) Return(_a0 *types.QueryAllStateInfoResponse, _a1 error) *MockQueryClient_StateInfoAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueryClient_StateInfoAll_Call) RunAndReturn(run func(context.Context, *types.QueryAllStateInfoRequest, ...grpc.CallOption) (*types.QueryAllStateInfoResponse, error)) *MockQueryClient_StateInfoAll_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockQueryClient creates a new instance of MockQueryClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQueryClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQueryClient {
	mock := &MockQueryClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
