// Code generated by mockery v2.50.2. DO NOT EDIT.

package daclient

import (
	context "context"

	daclient "github.com/dymensionxyz/dymint/da/celestia/client"
	mock "github.com/stretchr/testify/mock"

	types "github.com/cosmos/cosmos-sdk/types"
)

// MockDAClient is an autogenerated mock type for the DAClient type
type MockDAClient struct {
	mock.Mock
}

type MockDAClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDAClient) EXPECT() *MockDAClient_Expecter {
	return &MockDAClient_Expecter{mock: &_m.Mock}
}

// Balance provides a mock function with given fields: _a0
func (_m *MockDAClient) Balance(_a0 context.Context) (*types.Coin, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Balance")
	}

	var r0 *types.Coin
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*types.Coin, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *types.Coin); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Coin)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDAClient_Balance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Balance'
type MockDAClient_Balance_Call struct {
	*mock.Call
}

// Balance is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockDAClient_Expecter) Balance(_a0 interface{}) *MockDAClient_Balance_Call {
	return &MockDAClient_Balance_Call{Call: _e.mock.On("Balance", _a0)}
}

func (_c *MockDAClient_Balance_Call) Run(run func(_a0 context.Context)) *MockDAClient_Balance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockDAClient_Balance_Call) Return(_a0 *types.Coin, _a1 error) *MockDAClient_Balance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDAClient_Balance_Call) RunAndReturn(run func(context.Context) (*types.Coin, error)) *MockDAClient_Balance_Call {
	_c.Call.Return(run)
	return _c
}

// Commit provides a mock function with given fields: ctx, blobs, namespace
func (_m *MockDAClient) Commit(ctx context.Context, blobs [][]byte, namespace []byte) ([][]byte, error) {
	ret := _m.Called(ctx, blobs, namespace)

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 [][]byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, [][]byte, []byte) ([][]byte, error)); ok {
		return rf(ctx, blobs, namespace)
	}
	if rf, ok := ret.Get(0).(func(context.Context, [][]byte, []byte) [][]byte); ok {
		r0 = rf(ctx, blobs, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, [][]byte, []byte) error); ok {
		r1 = rf(ctx, blobs, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDAClient_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type MockDAClient_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
//   - ctx context.Context
//   - blobs [][]byte
//   - namespace []byte
func (_e *MockDAClient_Expecter) Commit(ctx interface{}, blobs interface{}, namespace interface{}) *MockDAClient_Commit_Call {
	return &MockDAClient_Commit_Call{Call: _e.mock.On("Commit", ctx, blobs, namespace)}
}

func (_c *MockDAClient_Commit_Call) Run(run func(ctx context.Context, blobs [][]byte, namespace []byte)) *MockDAClient_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([][]byte), args[2].([]byte))
	})
	return _c
}

func (_c *MockDAClient_Commit_Call) Return(_a0 [][]byte, _a1 error) *MockDAClient_Commit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDAClient_Commit_Call) RunAndReturn(run func(context.Context, [][]byte, []byte) ([][]byte, error)) *MockDAClient_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, ids, namespace
func (_m *MockDAClient) Get(ctx context.Context, ids [][]byte, namespace []byte) ([][]byte, error) {
	ret := _m.Called(ctx, ids, namespace)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 [][]byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, [][]byte, []byte) ([][]byte, error)); ok {
		return rf(ctx, ids, namespace)
	}
	if rf, ok := ret.Get(0).(func(context.Context, [][]byte, []byte) [][]byte); ok {
		r0 = rf(ctx, ids, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, [][]byte, []byte) error); ok {
		r1 = rf(ctx, ids, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDAClient_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockDAClient_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - ids [][]byte
//   - namespace []byte
func (_e *MockDAClient_Expecter) Get(ctx interface{}, ids interface{}, namespace interface{}) *MockDAClient_Get_Call {
	return &MockDAClient_Get_Call{Call: _e.mock.On("Get", ctx, ids, namespace)}
}

func (_c *MockDAClient_Get_Call) Run(run func(ctx context.Context, ids [][]byte, namespace []byte)) *MockDAClient_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([][]byte), args[2].([]byte))
	})
	return _c
}

func (_c *MockDAClient_Get_Call) Return(_a0 [][]byte, _a1 error) *MockDAClient_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDAClient_Get_Call) RunAndReturn(run func(context.Context, [][]byte, []byte) ([][]byte, error)) *MockDAClient_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByHeight provides a mock function with given fields: ctx, height
func (_m *MockDAClient) GetByHeight(ctx context.Context, height uint64) (*daclient.ExtendedHeader, error) {
	ret := _m.Called(ctx, height)

	if len(ret) == 0 {
		panic("no return value specified for GetByHeight")
	}

	var r0 *daclient.ExtendedHeader
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*daclient.ExtendedHeader, error)); ok {
		return rf(ctx, height)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *daclient.ExtendedHeader); ok {
		r0 = rf(ctx, height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*daclient.ExtendedHeader)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDAClient_GetByHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByHeight'
type MockDAClient_GetByHeight_Call struct {
	*mock.Call
}

// GetByHeight is a helper method to define mock.On call
//   - ctx context.Context
//   - height uint64
func (_e *MockDAClient_Expecter) GetByHeight(ctx interface{}, height interface{}) *MockDAClient_GetByHeight_Call {
	return &MockDAClient_GetByHeight_Call{Call: _e.mock.On("GetByHeight", ctx, height)}
}

func (_c *MockDAClient_GetByHeight_Call) Run(run func(ctx context.Context, height uint64)) *MockDAClient_GetByHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *MockDAClient_GetByHeight_Call) Return(_a0 *daclient.ExtendedHeader, _a1 error) *MockDAClient_GetByHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDAClient_GetByHeight_Call) RunAndReturn(run func(context.Context, uint64) (*daclient.ExtendedHeader, error)) *MockDAClient_GetByHeight_Call {
	_c.Call.Return(run)
	return _c
}

// GetIDs provides a mock function with given fields: ctx, height, namespace
func (_m *MockDAClient) GetIDs(ctx context.Context, height uint64, namespace []byte) (*daclient.GetIDsResult, error) {
	ret := _m.Called(ctx, height, namespace)

	if len(ret) == 0 {
		panic("no return value specified for GetIDs")
	}

	var r0 *daclient.GetIDsResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, []byte) (*daclient.GetIDsResult, error)); ok {
		return rf(ctx, height, namespace)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, []byte) *daclient.GetIDsResult); ok {
		r0 = rf(ctx, height, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*daclient.GetIDsResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, []byte) error); ok {
		r1 = rf(ctx, height, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDAClient_GetIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIDs'
type MockDAClient_GetIDs_Call struct {
	*mock.Call
}

// GetIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - height uint64
//   - namespace []byte
func (_e *MockDAClient_Expecter) GetIDs(ctx interface{}, height interface{}, namespace interface{}) *MockDAClient_GetIDs_Call {
	return &MockDAClient_GetIDs_Call{Call: _e.mock.On("GetIDs", ctx, height, namespace)}
}

func (_c *MockDAClient_GetIDs_Call) Run(run func(ctx context.Context, height uint64, namespace []byte)) *MockDAClient_GetIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].([]byte))
	})
	return _c
}

func (_c *MockDAClient_GetIDs_Call) Return(_a0 *daclient.GetIDsResult, _a1 error) *MockDAClient_GetIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDAClient_GetIDs_Call) RunAndReturn(run func(context.Context, uint64, []byte) (*daclient.GetIDsResult, error)) *MockDAClient_GetIDs_Call {
	_c.Call.Return(run)
	return _c
}

// GetProofs provides a mock function with given fields: ctx, ids, namespace
func (_m *MockDAClient) GetProofs(ctx context.Context, ids [][]byte, namespace []byte) ([][]byte, error) {
	ret := _m.Called(ctx, ids, namespace)

	if len(ret) == 0 {
		panic("no return value specified for GetProofs")
	}

	var r0 [][]byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, [][]byte, []byte) ([][]byte, error)); ok {
		return rf(ctx, ids, namespace)
	}
	if rf, ok := ret.Get(0).(func(context.Context, [][]byte, []byte) [][]byte); ok {
		r0 = rf(ctx, ids, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, [][]byte, []byte) error); ok {
		r1 = rf(ctx, ids, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDAClient_GetProofs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProofs'
type MockDAClient_GetProofs_Call struct {
	*mock.Call
}

// GetProofs is a helper method to define mock.On call
//   - ctx context.Context
//   - ids [][]byte
//   - namespace []byte
func (_e *MockDAClient_Expecter) GetProofs(ctx interface{}, ids interface{}, namespace interface{}) *MockDAClient_GetProofs_Call {
	return &MockDAClient_GetProofs_Call{Call: _e.mock.On("GetProofs", ctx, ids, namespace)}
}

func (_c *MockDAClient_GetProofs_Call) Run(run func(ctx context.Context, ids [][]byte, namespace []byte)) *MockDAClient_GetProofs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([][]byte), args[2].([]byte))
	})
	return _c
}

func (_c *MockDAClient_GetProofs_Call) Return(_a0 [][]byte, _a1 error) *MockDAClient_GetProofs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDAClient_GetProofs_Call) RunAndReturn(run func(context.Context, [][]byte, []byte) ([][]byte, error)) *MockDAClient_GetProofs_Call {
	_c.Call.Return(run)
	return _c
}

// MaxBlobSize provides a mock function with given fields: ctx
func (_m *MockDAClient) MaxBlobSize(ctx context.Context) (uint64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for MaxBlobSize")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (uint64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) uint64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDAClient_MaxBlobSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MaxBlobSize'
type MockDAClient_MaxBlobSize_Call struct {
	*mock.Call
}

// MaxBlobSize is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDAClient_Expecter) MaxBlobSize(ctx interface{}) *MockDAClient_MaxBlobSize_Call {
	return &MockDAClient_MaxBlobSize_Call{Call: _e.mock.On("MaxBlobSize", ctx)}
}

func (_c *MockDAClient_MaxBlobSize_Call) Run(run func(ctx context.Context)) *MockDAClient_MaxBlobSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockDAClient_MaxBlobSize_Call) Return(_a0 uint64, _a1 error) *MockDAClient_MaxBlobSize_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDAClient_MaxBlobSize_Call) RunAndReturn(run func(context.Context) (uint64, error)) *MockDAClient_MaxBlobSize_Call {
	_c.Call.Return(run)
	return _c
}

// Submit provides a mock function with given fields: ctx, blobs, gasPrice, namespace
func (_m *MockDAClient) Submit(ctx context.Context, blobs [][]byte, gasPrice float64, namespace []byte) ([][]byte, error) {
	ret := _m.Called(ctx, blobs, gasPrice, namespace)

	if len(ret) == 0 {
		panic("no return value specified for Submit")
	}

	var r0 [][]byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, [][]byte, float64, []byte) ([][]byte, error)); ok {
		return rf(ctx, blobs, gasPrice, namespace)
	}
	if rf, ok := ret.Get(0).(func(context.Context, [][]byte, float64, []byte) [][]byte); ok {
		r0 = rf(ctx, blobs, gasPrice, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, [][]byte, float64, []byte) error); ok {
		r1 = rf(ctx, blobs, gasPrice, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDAClient_Submit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Submit'
type MockDAClient_Submit_Call struct {
	*mock.Call
}

// Submit is a helper method to define mock.On call
//   - ctx context.Context
//   - blobs [][]byte
//   - gasPrice float64
//   - namespace []byte
func (_e *MockDAClient_Expecter) Submit(ctx interface{}, blobs interface{}, gasPrice interface{}, namespace interface{}) *MockDAClient_Submit_Call {
	return &MockDAClient_Submit_Call{Call: _e.mock.On("Submit", ctx, blobs, gasPrice, namespace)}
}

func (_c *MockDAClient_Submit_Call) Run(run func(ctx context.Context, blobs [][]byte, gasPrice float64, namespace []byte)) *MockDAClient_Submit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([][]byte), args[2].(float64), args[3].([]byte))
	})
	return _c
}

func (_c *MockDAClient_Submit_Call) Return(_a0 [][]byte, _a1 error) *MockDAClient_Submit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDAClient_Submit_Call) RunAndReturn(run func(context.Context, [][]byte, float64, []byte) ([][]byte, error)) *MockDAClient_Submit_Call {
	_c.Call.Return(run)
	return _c
}

// SubmitWithOptions provides a mock function with given fields: ctx, blobs, gasPrice, namespace, options
func (_m *MockDAClient) SubmitWithOptions(ctx context.Context, blobs [][]byte, gasPrice float64, namespace []byte, options []byte) ([][]byte, error) {
	ret := _m.Called(ctx, blobs, gasPrice, namespace, options)

	if len(ret) == 0 {
		panic("no return value specified for SubmitWithOptions")
	}

	var r0 [][]byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, [][]byte, float64, []byte, []byte) ([][]byte, error)); ok {
		return rf(ctx, blobs, gasPrice, namespace, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, [][]byte, float64, []byte, []byte) [][]byte); ok {
		r0 = rf(ctx, blobs, gasPrice, namespace, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, [][]byte, float64, []byte, []byte) error); ok {
		r1 = rf(ctx, blobs, gasPrice, namespace, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDAClient_SubmitWithOptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubmitWithOptions'
type MockDAClient_SubmitWithOptions_Call struct {
	*mock.Call
}

// SubmitWithOptions is a helper method to define mock.On call
//   - ctx context.Context
//   - blobs [][]byte
//   - gasPrice float64
//   - namespace []byte
//   - options []byte
func (_e *MockDAClient_Expecter) SubmitWithOptions(ctx interface{}, blobs interface{}, gasPrice interface{}, namespace interface{}, options interface{}) *MockDAClient_SubmitWithOptions_Call {
	return &MockDAClient_SubmitWithOptions_Call{Call: _e.mock.On("SubmitWithOptions", ctx, blobs, gasPrice, namespace, options)}
}

func (_c *MockDAClient_SubmitWithOptions_Call) Run(run func(ctx context.Context, blobs [][]byte, gasPrice float64, namespace []byte, options []byte)) *MockDAClient_SubmitWithOptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([][]byte), args[2].(float64), args[3].([]byte), args[4].([]byte))
	})
	return _c
}

func (_c *MockDAClient_SubmitWithOptions_Call) Return(_a0 [][]byte, _a1 error) *MockDAClient_SubmitWithOptions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDAClient_SubmitWithOptions_Call) RunAndReturn(run func(context.Context, [][]byte, float64, []byte, []byte) ([][]byte, error)) *MockDAClient_SubmitWithOptions_Call {
	_c.Call.Return(run)
	return _c
}

// Validate provides a mock function with given fields: ctx, ids, proofs, namespace
func (_m *MockDAClient) Validate(ctx context.Context, ids [][]byte, proofs [][]byte, namespace []byte) ([]bool, error) {
	ret := _m.Called(ctx, ids, proofs, namespace)

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 []bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, [][]byte, [][]byte, []byte) ([]bool, error)); ok {
		return rf(ctx, ids, proofs, namespace)
	}
	if rf, ok := ret.Get(0).(func(context.Context, [][]byte, [][]byte, []byte) []bool); ok {
		r0 = rf(ctx, ids, proofs, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bool)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, [][]byte, [][]byte, []byte) error); ok {
		r1 = rf(ctx, ids, proofs, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDAClient_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type MockDAClient_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
//   - ctx context.Context
//   - ids [][]byte
//   - proofs [][]byte
//   - namespace []byte
func (_e *MockDAClient_Expecter) Validate(ctx interface{}, ids interface{}, proofs interface{}, namespace interface{}) *MockDAClient_Validate_Call {
	return &MockDAClient_Validate_Call{Call: _e.mock.On("Validate", ctx, ids, proofs, namespace)}
}

func (_c *MockDAClient_Validate_Call) Run(run func(ctx context.Context, ids [][]byte, proofs [][]byte, namespace []byte)) *MockDAClient_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([][]byte), args[2].([][]byte), args[3].([]byte))
	})
	return _c
}

func (_c *MockDAClient_Validate_Call) Return(_a0 []bool, _a1 error) *MockDAClient_Validate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDAClient_Validate_Call) RunAndReturn(run func(context.Context, [][]byte, [][]byte, []byte) ([]bool, error)) *MockDAClient_Validate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDAClient creates a new instance of MockDAClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDAClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDAClient {
	mock := &MockDAClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
