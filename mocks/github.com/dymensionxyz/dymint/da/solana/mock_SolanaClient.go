// Code generated by mockery v2.50.2. DO NOT EDIT.

package solana

import mock "github.com/stretchr/testify/mock"

// MockSolanaClient is an autogenerated mock type for the SolanaClient type
type MockSolanaClient struct {
	mock.Mock
}

type MockSolanaClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSolanaClient) EXPECT() *MockSolanaClient_Expecter {
	return &MockSolanaClient_Expecter{mock: &_m.Mock}
}

// GetAccountAddress provides a mock function with no fields
func (_m *MockSolanaClient) GetAccountAddress() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAccountAddress")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockSolanaClient_GetAccountAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountAddress'
type MockSolanaClient_GetAccountAddress_Call struct {
	*mock.Call
}

// GetAccountAddress is a helper method to define mock.On call
func (_e *MockSolanaClient_Expecter) GetAccountAddress() *MockSolanaClient_GetAccountAddress_Call {
	return &MockSolanaClient_GetAccountAddress_Call{Call: _e.mock.On("GetAccountAddress")}
}

func (_c *MockSolanaClient_GetAccountAddress_Call) Run(run func()) *MockSolanaClient_GetAccountAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSolanaClient_GetAccountAddress_Call) Return(_a0 string) *MockSolanaClient_GetAccountAddress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSolanaClient_GetAccountAddress_Call) RunAndReturn(run func() string) *MockSolanaClient_GetAccountAddress_Call {
	_c.Call.Return(run)
	return _c
}

// GetBalance provides a mock function with no fields
func (_m *MockSolanaClient) GetBalance() (uint64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBalance")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSolanaClient_GetBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBalance'
type MockSolanaClient_GetBalance_Call struct {
	*mock.Call
}

// GetBalance is a helper method to define mock.On call
func (_e *MockSolanaClient_Expecter) GetBalance() *MockSolanaClient_GetBalance_Call {
	return &MockSolanaClient_GetBalance_Call{Call: _e.mock.On("GetBalance")}
}

func (_c *MockSolanaClient_GetBalance_Call) Run(run func()) *MockSolanaClient_GetBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSolanaClient_GetBalance_Call) Return(_a0 uint64, _a1 error) *MockSolanaClient_GetBalance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSolanaClient_GetBalance_Call) RunAndReturn(run func() (uint64, error)) *MockSolanaClient_GetBalance_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlob provides a mock function with given fields: txHash
func (_m *MockSolanaClient) GetBlob(txHash string) ([]byte, error) {
	ret := _m.Called(txHash)

	if len(ret) == 0 {
		panic("no return value specified for GetBlob")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(txHash)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(txHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(txHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSolanaClient_GetBlob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlob'
type MockSolanaClient_GetBlob_Call struct {
	*mock.Call
}

// GetBlob is a helper method to define mock.On call
//   - txHash string
func (_e *MockSolanaClient_Expecter) GetBlob(txHash interface{}) *MockSolanaClient_GetBlob_Call {
	return &MockSolanaClient_GetBlob_Call{Call: _e.mock.On("GetBlob", txHash)}
}

func (_c *MockSolanaClient_GetBlob_Call) Run(run func(txHash string)) *MockSolanaClient_GetBlob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSolanaClient_GetBlob_Call) Return(_a0 []byte, _a1 error) *MockSolanaClient_GetBlob_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSolanaClient_GetBlob_Call) RunAndReturn(run func(string) ([]byte, error)) *MockSolanaClient_GetBlob_Call {
	_c.Call.Return(run)
	return _c
}

// SubmitBlob provides a mock function with given fields: blob
func (_m *MockSolanaClient) SubmitBlob(blob []byte) (string, string, error) {
	ret := _m.Called(blob)

	if len(ret) == 0 {
		panic("no return value specified for SubmitBlob")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func([]byte) (string, string, error)); ok {
		return rf(blob)
	}
	if rf, ok := ret.Get(0).(func([]byte) string); ok {
		r0 = rf(blob)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func([]byte) string); ok {
		r1 = rf(blob)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func([]byte) error); ok {
		r2 = rf(blob)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockSolanaClient_SubmitBlob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubmitBlob'
type MockSolanaClient_SubmitBlob_Call struct {
	*mock.Call
}

// SubmitBlob is a helper method to define mock.On call
//   - blob []byte
func (_e *MockSolanaClient_Expecter) SubmitBlob(blob interface{}) *MockSolanaClient_SubmitBlob_Call {
	return &MockSolanaClient_SubmitBlob_Call{Call: _e.mock.On("SubmitBlob", blob)}
}

func (_c *MockSolanaClient_SubmitBlob_Call) Run(run func(blob []byte)) *MockSolanaClient_SubmitBlob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockSolanaClient_SubmitBlob_Call) Return(_a0 string, _a1 string, _a2 error) *MockSolanaClient_SubmitBlob_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockSolanaClient_SubmitBlob_Call) RunAndReturn(run func([]byte) (string, string, error)) *MockSolanaClient_SubmitBlob_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSolanaClient creates a new instance of MockSolanaClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSolanaClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSolanaClient {
	mock := &MockSolanaClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
