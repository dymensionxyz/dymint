// Code generated by mockery v2.53.5. DO NOT EDIT.

package bnb

import (
	big "math/big"

	common "github.com/dymensionxyz/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"
)

// MockBNBClient is an autogenerated mock type for the BNBClient type
type MockBNBClient struct {
	mock.Mock
}

type MockBNBClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBNBClient) EXPECT() *MockBNBClient_Expecter {
	return &MockBNBClient_Expecter{mock: &_m.Mock}
}

// GetAccountAddress provides a mock function with no fields
func (_m *MockBNBClient) GetAccountAddress() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAccountAddress")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockBNBClient_GetAccountAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountAddress'
type MockBNBClient_GetAccountAddress_Call struct {
	*mock.Call
}

// GetAccountAddress is a helper method to define mock.On call
func (_e *MockBNBClient_Expecter) GetAccountAddress() *MockBNBClient_GetAccountAddress_Call {
	return &MockBNBClient_GetAccountAddress_Call{Call: _e.mock.On("GetAccountAddress")}
}

func (_c *MockBNBClient_GetAccountAddress_Call) Run(run func()) *MockBNBClient_GetAccountAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBNBClient_GetAccountAddress_Call) Return(_a0 string) *MockBNBClient_GetAccountAddress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBNBClient_GetAccountAddress_Call) RunAndReturn(run func() string) *MockBNBClient_GetAccountAddress_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlob provides a mock function with given fields: txHash
func (_m *MockBNBClient) GetBlob(txHash string) ([]byte, error) {
	ret := _m.Called(txHash)

	if len(ret) == 0 {
		panic("no return value specified for GetBlob")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(txHash)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(txHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(txHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBNBClient_GetBlob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlob'
type MockBNBClient_GetBlob_Call struct {
	*mock.Call
}

// GetBlob is a helper method to define mock.On call
//   - txHash string
func (_e *MockBNBClient_Expecter) GetBlob(txHash interface{}) *MockBNBClient_GetBlob_Call {
	return &MockBNBClient_GetBlob_Call{Call: _e.mock.On("GetBlob", txHash)}
}

func (_c *MockBNBClient_GetBlob_Call) Run(run func(txHash string)) *MockBNBClient_GetBlob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockBNBClient_GetBlob_Call) Return(_a0 []byte, _a1 error) *MockBNBClient_GetBlob_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBNBClient_GetBlob_Call) RunAndReturn(run func(string) ([]byte, error)) *MockBNBClient_GetBlob_Call {
	_c.Call.Return(run)
	return _c
}

// GetSignerBalance provides a mock function with no fields
func (_m *MockBNBClient) GetSignerBalance() (*big.Int, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSignerBalance")
	}

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func() (*big.Int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *big.Int); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBNBClient_GetSignerBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSignerBalance'
type MockBNBClient_GetSignerBalance_Call struct {
	*mock.Call
}

// GetSignerBalance is a helper method to define mock.On call
func (_e *MockBNBClient_Expecter) GetSignerBalance() *MockBNBClient_GetSignerBalance_Call {
	return &MockBNBClient_GetSignerBalance_Call{Call: _e.mock.On("GetSignerBalance")}
}

func (_c *MockBNBClient_GetSignerBalance_Call) Run(run func()) *MockBNBClient_GetSignerBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBNBClient_GetSignerBalance_Call) Return(_a0 *big.Int, _a1 error) *MockBNBClient_GetSignerBalance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBNBClient_GetSignerBalance_Call) RunAndReturn(run func() (*big.Int, error)) *MockBNBClient_GetSignerBalance_Call {
	_c.Call.Return(run)
	return _c
}

// SubmitBlob provides a mock function with given fields: blob
func (_m *MockBNBClient) SubmitBlob(blob []byte) (common.Hash, []byte, []byte, error) {
	ret := _m.Called(blob)

	if len(ret) == 0 {
		panic("no return value specified for SubmitBlob")
	}

	var r0 common.Hash
	var r1 []byte
	var r2 []byte
	var r3 error
	if rf, ok := ret.Get(0).(func([]byte) (common.Hash, []byte, []byte, error)); ok {
		return rf(blob)
	}
	if rf, ok := ret.Get(0).(func([]byte) common.Hash); ok {
		r0 = rf(blob)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) []byte); ok {
		r1 = rf(blob)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	if rf, ok := ret.Get(2).(func([]byte) []byte); ok {
		r2 = rf(blob)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).([]byte)
		}
	}

	if rf, ok := ret.Get(3).(func([]byte) error); ok {
		r3 = rf(blob)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// MockBNBClient_SubmitBlob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubmitBlob'
type MockBNBClient_SubmitBlob_Call struct {
	*mock.Call
}

// SubmitBlob is a helper method to define mock.On call
//   - blob []byte
func (_e *MockBNBClient_Expecter) SubmitBlob(blob interface{}) *MockBNBClient_SubmitBlob_Call {
	return &MockBNBClient_SubmitBlob_Call{Call: _e.mock.On("SubmitBlob", blob)}
}

func (_c *MockBNBClient_SubmitBlob_Call) Run(run func(blob []byte)) *MockBNBClient_SubmitBlob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockBNBClient_SubmitBlob_Call) Return(_a0 common.Hash, _a1 []byte, _a2 []byte, _a3 error) *MockBNBClient_SubmitBlob_Call {
	_c.Call.Return(_a0, _a1, _a2, _a3)
	return _c
}

func (_c *MockBNBClient_SubmitBlob_Call) RunAndReturn(run func([]byte) (common.Hash, []byte, []byte, error)) *MockBNBClient_SubmitBlob_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateInclusion provides a mock function with given fields: txHash, commitment, proof
func (_m *MockBNBClient) ValidateInclusion(txHash string, commitment []byte, proof []byte) error {
	ret := _m.Called(txHash, commitment, proof)

	if len(ret) == 0 {
		panic("no return value specified for ValidateInclusion")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte, []byte) error); ok {
		r0 = rf(txHash, commitment, proof)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBNBClient_ValidateInclusion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateInclusion'
type MockBNBClient_ValidateInclusion_Call struct {
	*mock.Call
}

// ValidateInclusion is a helper method to define mock.On call
//   - txHash string
//   - commitment []byte
//   - proof []byte
func (_e *MockBNBClient_Expecter) ValidateInclusion(txHash interface{}, commitment interface{}, proof interface{}) *MockBNBClient_ValidateInclusion_Call {
	return &MockBNBClient_ValidateInclusion_Call{Call: _e.mock.On("ValidateInclusion", txHash, commitment, proof)}
}

func (_c *MockBNBClient_ValidateInclusion_Call) Run(run func(txHash string, commitment []byte, proof []byte)) *MockBNBClient_ValidateInclusion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]byte), args[2].([]byte))
	})
	return _c
}

func (_c *MockBNBClient_ValidateInclusion_Call) Return(_a0 error) *MockBNBClient_ValidateInclusion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBNBClient_ValidateInclusion_Call) RunAndReturn(run func(string, []byte, []byte) error) *MockBNBClient_ValidateInclusion_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBNBClient creates a new instance of MockBNBClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBNBClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBNBClient {
	mock := &MockBNBClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
