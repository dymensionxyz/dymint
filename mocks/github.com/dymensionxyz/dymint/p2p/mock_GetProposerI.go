// Code generated by mockery v2.43.0. DO NOT EDIT.

package p2p

import (
	mock "github.com/stretchr/testify/mock"
	crypto "github.com/tendermint/tendermint/crypto"
)

// MockGetProposerI is an autogenerated mock type for the GetProposerI type
type MockGetProposerI struct {
	mock.Mock
}

type MockGetProposerI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGetProposerI) EXPECT() *MockGetProposerI_Expecter {
	return &MockGetProposerI_Expecter{mock: &_m.Mock}
}

// GetProposerPubKey provides a mock function with given fields:
func (_m *MockGetProposerI) GetProposerPubKey() crypto.PubKey {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetProposerPubKey")
	}

	var r0 crypto.PubKey
	if rf, ok := ret.Get(0).(func() crypto.PubKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(crypto.PubKey)
		}
	}

	return r0
}

// MockGetProposerI_GetProposerPubKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProposerPubKey'
type MockGetProposerI_GetProposerPubKey_Call struct {
	*mock.Call
}

// GetProposerPubKey is a helper method to define mock.On call
func (_e *MockGetProposerI_Expecter) GetProposerPubKey() *MockGetProposerI_GetProposerPubKey_Call {
	return &MockGetProposerI_GetProposerPubKey_Call{Call: _e.mock.On("GetProposerPubKey")}
}

func (_c *MockGetProposerI_GetProposerPubKey_Call) Run(run func()) *MockGetProposerI_GetProposerPubKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGetProposerI_GetProposerPubKey_Call) Return(_a0 crypto.PubKey) *MockGetProposerI_GetProposerPubKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGetProposerI_GetProposerPubKey_Call) RunAndReturn(run func() crypto.PubKey) *MockGetProposerI_GetProposerPubKey_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGetProposerI creates a new instance of MockGetProposerI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGetProposerI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGetProposerI {
	mock := &MockGetProposerI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
