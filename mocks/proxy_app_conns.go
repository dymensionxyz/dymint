// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	log "github.com/tendermint/tendermint/libs/log"

	proxy "github.com/tendermint/tendermint/proxy"
)

// AppConns is an autogenerated mock type for the AppConns type
type AppConns struct {
	mock.Mock
}

// Consensus provides a mock function with given fields:
func (_m *AppConns) Consensus() proxy.AppConnConsensus {
	ret := _m.Called()

	var r0 proxy.AppConnConsensus
	if rf, ok := ret.Get(0).(func() proxy.AppConnConsensus); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(proxy.AppConnConsensus)
		}
	}

	return r0
}

// IsRunning provides a mock function with given fields:
func (_m *AppConns) IsRunning() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Mempool provides a mock function with given fields:
func (_m *AppConns) Mempool() proxy.AppConnMempool {
	ret := _m.Called()

	var r0 proxy.AppConnMempool
	if rf, ok := ret.Get(0).(func() proxy.AppConnMempool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(proxy.AppConnMempool)
		}
	}

	return r0
}

// OnReset provides a mock function with given fields:
func (_m *AppConns) OnReset() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OnStart provides a mock function with given fields:
func (_m *AppConns) OnStart() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OnStop provides a mock function with given fields:
func (_m *AppConns) OnStop() {
	_m.Called()
}

// Query provides a mock function with given fields:
func (_m *AppConns) Query() proxy.AppConnQuery {
	ret := _m.Called()

	var r0 proxy.AppConnQuery
	if rf, ok := ret.Get(0).(func() proxy.AppConnQuery); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(proxy.AppConnQuery)
		}
	}

	return r0
}

// Quit provides a mock function with given fields:
func (_m *AppConns) Quit() <-chan struct{} {
	ret := _m.Called()

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// Reset provides a mock function with given fields:
func (_m *AppConns) Reset() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetLogger provides a mock function with given fields: _a0
func (_m *AppConns) SetLogger(_a0 log.Logger) {
	_m.Called(_a0)
}

// Snapshot provides a mock function with given fields:
func (_m *AppConns) Snapshot() proxy.AppConnSnapshot {
	ret := _m.Called()

	var r0 proxy.AppConnSnapshot
	if rf, ok := ret.Get(0).(func() proxy.AppConnSnapshot); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(proxy.AppConnSnapshot)
		}
	}

	return r0
}

// Start provides a mock function with given fields:
func (_m *AppConns) Start() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields:
func (_m *AppConns) Stop() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// String provides a mock function with given fields:
func (_m *AppConns) String() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type mockConstructorTestingTNewAppConns interface {
	mock.TestingT
	Cleanup(func())
}

// NewAppConns creates a new instance of AppConns. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAppConns(t mockConstructorTestingTNewAppConns) *AppConns {
	mock := &AppConns{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
