// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	client "github.com/celestiaorg/celestia-openrpc"
	blob "github.com/celestiaorg/celestia-openrpc/types/blob"

	context "context"

	header "github.com/celestiaorg/celestia-openrpc/types/header"

	mock "github.com/stretchr/testify/mock"

	share "github.com/celestiaorg/celestia-openrpc/types/share"
)

// CelestiaRPCClient is an autogenerated mock type for the CelestiaRPCClient type
type CelestiaRPCClient struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx, height, namespace, commitment
func (_m *CelestiaRPCClient) Get(ctx context.Context, height uint64, namespace share.Namespace, commitment blob.Commitment) (*blob.Blob, error) {
	ret := _m.Called(ctx, height, namespace, commitment)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *blob.Blob
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, share.Namespace, blob.Commitment) (*blob.Blob, error)); ok {
		return rf(ctx, height, namespace, commitment)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, share.Namespace, blob.Commitment) *blob.Blob); ok {
		r0 = rf(ctx, height, namespace, commitment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*blob.Blob)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, share.Namespace, blob.Commitment) error); ok {
		r1 = rf(ctx, height, namespace, commitment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: _a0, _a1, _a2
func (_m *CelestiaRPCClient) GetAll(_a0 context.Context, _a1 uint64, _a2 []share.Namespace) ([]*blob.Blob, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []*blob.Blob
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, []share.Namespace) ([]*blob.Blob, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, []share.Namespace) []*blob.Blob); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*blob.Blob)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, []share.Namespace) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByHeight provides a mock function with given fields: ctx, height
func (_m *CelestiaRPCClient) GetByHeight(ctx context.Context, height uint64) (*header.ExtendedHeader, error) {
	ret := _m.Called(ctx, height)

	if len(ret) == 0 {
		panic("no return value specified for GetByHeight")
	}

	var r0 *header.ExtendedHeader
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*header.ExtendedHeader, error)); ok {
		return rf(ctx, height)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *header.ExtendedHeader); ok {
		r0 = rf(ctx, height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*header.ExtendedHeader)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProof provides a mock function with given fields: ctx, height, namespace, commitment
func (_m *CelestiaRPCClient) GetProof(ctx context.Context, height uint64, namespace share.Namespace, commitment blob.Commitment) (*blob.Proof, error) {
	ret := _m.Called(ctx, height, namespace, commitment)

	if len(ret) == 0 {
		panic("no return value specified for GetProof")
	}

	var r0 *blob.Proof
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, share.Namespace, blob.Commitment) (*blob.Proof, error)); ok {
		return rf(ctx, height, namespace, commitment)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, share.Namespace, blob.Commitment) *blob.Proof); ok {
		r0 = rf(ctx, height, namespace, commitment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*blob.Proof)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, share.Namespace, blob.Commitment) error); ok {
		r1 = rf(ctx, height, namespace, commitment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Included provides a mock function with given fields: ctx, height, namespace, proof, commitment
func (_m *CelestiaRPCClient) Included(ctx context.Context, height uint64, namespace share.Namespace, proof *blob.Proof, commitment blob.Commitment) (bool, error) {
	ret := _m.Called(ctx, height, namespace, proof, commitment)

	if len(ret) == 0 {
		panic("no return value specified for Included")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, share.Namespace, *blob.Proof, blob.Commitment) (bool, error)); ok {
		return rf(ctx, height, namespace, proof, commitment)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, share.Namespace, *blob.Proof, blob.Commitment) bool); ok {
		r0 = rf(ctx, height, namespace, proof, commitment)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, share.Namespace, *blob.Proof, blob.Commitment) error); ok {
		r1 = rf(ctx, height, namespace, proof, commitment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Submit provides a mock function with given fields: ctx, blobs, gasPrice
func (_m *CelestiaRPCClient) Submit(ctx context.Context, blobs []*blob.Blob, gasPrice client.GasPrice) (uint64, error) {
	ret := _m.Called(ctx, blobs, gasPrice)

	if len(ret) == 0 {
		panic("no return value specified for Submit")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []*blob.Blob, client.GasPrice) (uint64, error)); ok {
		return rf(ctx, blobs, gasPrice)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []*blob.Blob, client.GasPrice) uint64); ok {
		r0 = rf(ctx, blobs, gasPrice)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []*blob.Blob, client.GasPrice) error); ok {
		r1 = rf(ctx, blobs, gasPrice)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCelestiaRPCClient creates a new instance of CelestiaRPCClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCelestiaRPCClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *CelestiaRPCClient {
	mock := &CelestiaRPCClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
