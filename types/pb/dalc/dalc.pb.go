// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dalc/dalc.proto

package dalc

import (
	context "context"
	fmt "fmt"
	optimint "github.com/celestiaorg/optimint/types/pb/optimint"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StatusCode int32

const (
	StatusCode_STATUS_CODE_UNSPECIFIED StatusCode = 0
	StatusCode_STATUS_CODE_SUCCESS     StatusCode = 1
	StatusCode_STATUS_CODE_TIMEOUT     StatusCode = 2
	StatusCode_STATUS_CODE_ERROR       StatusCode = 3
)

var StatusCode_name = map[int32]string{
	0: "STATUS_CODE_UNSPECIFIED",
	1: "STATUS_CODE_SUCCESS",
	2: "STATUS_CODE_TIMEOUT",
	3: "STATUS_CODE_ERROR",
}

var StatusCode_value = map[string]int32{
	"STATUS_CODE_UNSPECIFIED": 0,
	"STATUS_CODE_SUCCESS":     1,
	"STATUS_CODE_TIMEOUT":     2,
	"STATUS_CODE_ERROR":       3,
}

func (x StatusCode) String() string {
	return proto.EnumName(StatusCode_name, int32(x))
}

func (StatusCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_45d7d8eda2693dc1, []int{0}
}

type DAResponse struct {
	Code            StatusCode `protobuf:"varint,1,opt,name=code,proto3,enum=dalc.StatusCode" json:"code,omitempty"`
	Message         string     `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	DataLayerHeight uint64     `protobuf:"varint,3,opt,name=data_layer_height,json=dataLayerHeight,proto3" json:"data_layer_height,omitempty"`
}

func (m *DAResponse) Reset()         { *m = DAResponse{} }
func (m *DAResponse) String() string { return proto.CompactTextString(m) }
func (*DAResponse) ProtoMessage()    {}
func (*DAResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_45d7d8eda2693dc1, []int{0}
}
func (m *DAResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DAResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DAResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DAResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DAResponse.Merge(m, src)
}
func (m *DAResponse) XXX_Size() int {
	return m.Size()
}
func (m *DAResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DAResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DAResponse proto.InternalMessageInfo

func (m *DAResponse) GetCode() StatusCode {
	if m != nil {
		return m.Code
	}
	return StatusCode_STATUS_CODE_UNSPECIFIED
}

func (m *DAResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *DAResponse) GetDataLayerHeight() uint64 {
	if m != nil {
		return m.DataLayerHeight
	}
	return 0
}

type SubmitBatchRequest struct {
	Block *optimint.Block `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
}

func (m *SubmitBatchRequest) Reset()         { *m = SubmitBatchRequest{} }
func (m *SubmitBatchRequest) String() string { return proto.CompactTextString(m) }
func (*SubmitBatchRequest) ProtoMessage()    {}
func (*SubmitBatchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_45d7d8eda2693dc1, []int{1}
}
func (m *SubmitBatchRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubmitBatchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubmitBatchRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubmitBatchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitBatchRequest.Merge(m, src)
}
func (m *SubmitBatchRequest) XXX_Size() int {
	return m.Size()
}
func (m *SubmitBatchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitBatchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitBatchRequest proto.InternalMessageInfo

func (m *SubmitBatchRequest) GetBlock() *optimint.Block {
	if m != nil {
		return m.Block
	}
	return nil
}

type SubmitBatchResponse struct {
	Result *DAResponse `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *SubmitBatchResponse) Reset()         { *m = SubmitBatchResponse{} }
func (m *SubmitBatchResponse) String() string { return proto.CompactTextString(m) }
func (*SubmitBatchResponse) ProtoMessage()    {}
func (*SubmitBatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_45d7d8eda2693dc1, []int{2}
}
func (m *SubmitBatchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubmitBatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubmitBatchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubmitBatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitBatchResponse.Merge(m, src)
}
func (m *SubmitBatchResponse) XXX_Size() int {
	return m.Size()
}
func (m *SubmitBatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitBatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitBatchResponse proto.InternalMessageInfo

func (m *SubmitBatchResponse) GetResult() *DAResponse {
	if m != nil {
		return m.Result
	}
	return nil
}

type CheckBatchAvailabilityRequest struct {
	DataLayerHeight uint64 `protobuf:"varint,1,opt,name=data_layer_height,json=dataLayerHeight,proto3" json:"data_layer_height,omitempty"`
}

func (m *CheckBatchAvailabilityRequest) Reset()         { *m = CheckBatchAvailabilityRequest{} }
func (m *CheckBatchAvailabilityRequest) String() string { return proto.CompactTextString(m) }
func (*CheckBatchAvailabilityRequest) ProtoMessage()    {}
func (*CheckBatchAvailabilityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_45d7d8eda2693dc1, []int{3}
}
func (m *CheckBatchAvailabilityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckBatchAvailabilityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckBatchAvailabilityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckBatchAvailabilityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckBatchAvailabilityRequest.Merge(m, src)
}
func (m *CheckBatchAvailabilityRequest) XXX_Size() int {
	return m.Size()
}
func (m *CheckBatchAvailabilityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckBatchAvailabilityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckBatchAvailabilityRequest proto.InternalMessageInfo

func (m *CheckBatchAvailabilityRequest) GetDataLayerHeight() uint64 {
	if m != nil {
		return m.DataLayerHeight
	}
	return 0
}

type CheckBatchAvailabilityResponse struct {
	Result        *DAResponse `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	DataAvailable bool        `protobuf:"varint,2,opt,name=data_available,json=dataAvailable,proto3" json:"data_available,omitempty"`
}

func (m *CheckBatchAvailabilityResponse) Reset()         { *m = CheckBatchAvailabilityResponse{} }
func (m *CheckBatchAvailabilityResponse) String() string { return proto.CompactTextString(m) }
func (*CheckBatchAvailabilityResponse) ProtoMessage()    {}
func (*CheckBatchAvailabilityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_45d7d8eda2693dc1, []int{4}
}
func (m *CheckBatchAvailabilityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckBatchAvailabilityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckBatchAvailabilityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckBatchAvailabilityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckBatchAvailabilityResponse.Merge(m, src)
}
func (m *CheckBatchAvailabilityResponse) XXX_Size() int {
	return m.Size()
}
func (m *CheckBatchAvailabilityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckBatchAvailabilityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CheckBatchAvailabilityResponse proto.InternalMessageInfo

func (m *CheckBatchAvailabilityResponse) GetResult() *DAResponse {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *CheckBatchAvailabilityResponse) GetDataAvailable() bool {
	if m != nil {
		return m.DataAvailable
	}
	return false
}

type RetrieveBatchesRequest struct {
	DataLayerHeight uint64 `protobuf:"varint,1,opt,name=data_layer_height,json=dataLayerHeight,proto3" json:"data_layer_height,omitempty"`
}

func (m *RetrieveBatchesRequest) Reset()         { *m = RetrieveBatchesRequest{} }
func (m *RetrieveBatchesRequest) String() string { return proto.CompactTextString(m) }
func (*RetrieveBatchesRequest) ProtoMessage()    {}
func (*RetrieveBatchesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_45d7d8eda2693dc1, []int{5}
}
func (m *RetrieveBatchesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveBatchesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveBatchesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveBatchesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveBatchesRequest.Merge(m, src)
}
func (m *RetrieveBatchesRequest) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveBatchesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveBatchesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveBatchesRequest proto.InternalMessageInfo

func (m *RetrieveBatchesRequest) GetDataLayerHeight() uint64 {
	if m != nil {
		return m.DataLayerHeight
	}
	return 0
}

type RetrieveBatchesResponse struct {
	Result *DAResponse       `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Blocks []*optimint.Block `protobuf:"bytes,2,rep,name=blocks,proto3" json:"blocks,omitempty"`
}

func (m *RetrieveBatchesResponse) Reset()         { *m = RetrieveBatchesResponse{} }
func (m *RetrieveBatchesResponse) String() string { return proto.CompactTextString(m) }
func (*RetrieveBatchesResponse) ProtoMessage()    {}
func (*RetrieveBatchesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_45d7d8eda2693dc1, []int{6}
}
func (m *RetrieveBatchesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveBatchesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveBatchesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveBatchesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveBatchesResponse.Merge(m, src)
}
func (m *RetrieveBatchesResponse) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveBatchesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveBatchesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveBatchesResponse proto.InternalMessageInfo

func (m *RetrieveBatchesResponse) GetResult() *DAResponse {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *RetrieveBatchesResponse) GetBlocks() []*optimint.Block {
	if m != nil {
		return m.Blocks
	}
	return nil
}

func init() {
	proto.RegisterEnum("dalc.StatusCode", StatusCode_name, StatusCode_value)
	proto.RegisterType((*DAResponse)(nil), "dalc.DAResponse")
	proto.RegisterType((*SubmitBatchRequest)(nil), "dalc.SubmitBatchRequest")
	proto.RegisterType((*SubmitBatchResponse)(nil), "dalc.SubmitBatchResponse")
	proto.RegisterType((*CheckBatchAvailabilityRequest)(nil), "dalc.CheckBatchAvailabilityRequest")
	proto.RegisterType((*CheckBatchAvailabilityResponse)(nil), "dalc.CheckBatchAvailabilityResponse")
	proto.RegisterType((*RetrieveBatchesRequest)(nil), "dalc.RetrieveBatchesRequest")
	proto.RegisterType((*RetrieveBatchesResponse)(nil), "dalc.RetrieveBatchesResponse")
}

func init() { proto.RegisterFile("dalc/dalc.proto", fileDescriptor_45d7d8eda2693dc1) }

var fileDescriptor_45d7d8eda2693dc1 = []byte{
	// 530 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0x4f, 0x6f, 0xda, 0x4c,
	0x10, 0xc6, 0x31, 0xe1, 0xe5, 0x6d, 0x07, 0x35, 0x90, 0x8d, 0x1a, 0x5c, 0xda, 0x58, 0xc8, 0x4d,
	0x54, 0x14, 0xa9, 0x20, 0xd1, 0x63, 0x0f, 0x15, 0xd8, 0x6e, 0x8b, 0x9a, 0x96, 0x68, 0x0d, 0x97,
	0x5e, 0xd0, 0xda, 0x8c, 0x60, 0x15, 0x13, 0x13, 0xef, 0x82, 0xca, 0x77, 0xe8, 0xa1, 0x1f, 0xab,
	0xc7, 0x1c, 0x7b, 0xac, 0xe0, 0x8b, 0x54, 0xfe, 0x03, 0xa1, 0x89, 0x13, 0x29, 0xbd, 0x58, 0xeb,
	0xf9, 0x79, 0x66, 0x9f, 0xf1, 0x3c, 0x1a, 0x28, 0x0e, 0x99, 0xe7, 0x36, 0xc2, 0x47, 0x7d, 0x1a,
	0xf8, 0xd2, 0x27, 0xb9, 0xf0, 0x5c, 0x29, 0xfb, 0x53, 0xc9, 0x27, 0xfc, 0x42, 0x36, 0xd6, 0x87,
	0x18, 0xeb, 0xdf, 0x00, 0xcc, 0x16, 0x45, 0x31, 0xf5, 0x2f, 0x04, 0x92, 0x23, 0xc8, 0xb9, 0xfe,
	0x10, 0x55, 0xa5, 0xaa, 0xd4, 0x76, 0x9b, 0xa5, 0x7a, 0x54, 0xc7, 0x96, 0x4c, 0xce, 0x84, 0xe1,
	0x0f, 0x91, 0x46, 0x94, 0xa8, 0xf0, 0xff, 0x04, 0x85, 0x60, 0x23, 0x54, 0xb3, 0x55, 0xa5, 0xf6,
	0x98, 0xae, 0x5f, 0xc9, 0x09, 0xec, 0x0d, 0x99, 0x64, 0x03, 0x8f, 0x2d, 0x30, 0x18, 0x8c, 0x91,
	0x8f, 0xc6, 0x52, 0xdd, 0xa9, 0x2a, 0xb5, 0x1c, 0x2d, 0x86, 0xe0, 0x34, 0x8c, 0x7f, 0x8c, 0xc2,
	0xfa, 0x5b, 0x20, 0xf6, 0xcc, 0x99, 0x70, 0xd9, 0x66, 0xd2, 0x1d, 0x53, 0xbc, 0x9c, 0xa1, 0x90,
	0xe4, 0x18, 0xfe, 0x73, 0x3c, 0xdf, 0x3d, 0x8f, 0x24, 0x14, 0x9a, 0xc5, 0xfa, 0x46, 0x6f, 0x3b,
	0x0c, 0xd3, 0x98, 0xea, 0xef, 0x60, 0xff, 0xaf, 0xe4, 0x44, 0x7f, 0x0d, 0xf2, 0x01, 0x8a, 0x99,
	0x27, 0x93, 0xf4, 0xa4, 0x83, 0xeb, 0x0e, 0x69, 0xc2, 0xf5, 0x4f, 0x70, 0x68, 0x8c, 0xd1, 0x3d,
	0x8f, 0xf2, 0x5b, 0x73, 0xc6, 0x3d, 0xe6, 0x70, 0x8f, 0xcb, 0xc5, 0x5a, 0x48, 0x6a, 0x2b, 0x4a,
	0x7a, 0x2b, 0x97, 0xa0, 0xdd, 0x55, 0xec, 0xa1, 0xc2, 0xc8, 0x31, 0xec, 0x46, 0xf7, 0xb2, 0xb8,
	0x8c, 0x17, 0xff, 0xe3, 0x47, 0xf4, 0x49, 0x18, 0x6d, 0xad, 0x83, 0xba, 0x09, 0x07, 0x14, 0x65,
	0xc0, 0x71, 0x8e, 0xd1, 0xad, 0x28, 0xfe, 0x45, 0xb8, 0x07, 0xe5, 0x5b, 0x55, 0x1e, 0xac, 0xf8,
	0x15, 0xe4, 0xa3, 0xa1, 0x08, 0x35, 0x5b, 0xdd, 0x49, 0x9b, 0x59, 0x82, 0x4f, 0x02, 0x80, 0x6b,
	0x2f, 0x91, 0xe7, 0x50, 0xb6, 0x7b, 0xad, 0x5e, 0xdf, 0x1e, 0x18, 0x5d, 0xd3, 0x1a, 0xf4, 0xbf,
	0xd8, 0x67, 0x96, 0xd1, 0x79, 0xdf, 0xb1, 0xcc, 0x52, 0x86, 0x94, 0x61, 0x7f, 0x1b, 0xda, 0x7d,
	0xc3, 0xb0, 0x6c, 0xbb, 0xa4, 0xdc, 0x04, 0xbd, 0xce, 0x67, 0xab, 0xdb, 0xef, 0x95, 0xb2, 0xe4,
	0x29, 0xec, 0x6d, 0x03, 0x8b, 0xd2, 0x2e, 0x2d, 0xed, 0x34, 0xbf, 0x67, 0xa1, 0x60, 0xb6, 0x4e,
	0x0d, 0x1b, 0x83, 0x39, 0x77, 0x91, 0x98, 0x50, 0xd8, 0x32, 0x0e, 0x51, 0x13, 0x8b, 0xdf, 0x32,
	0x62, 0xe5, 0x59, 0x0a, 0x89, 0x1b, 0xd7, 0x33, 0x04, 0xe1, 0x20, 0x7d, 0xe0, 0xe4, 0x65, 0x9c,
	0x76, 0xaf, 0xb7, 0x2a, 0x47, 0xf7, 0x7f, 0xb4, 0xb9, 0xe6, 0x0c, 0x8a, 0x37, 0xc6, 0x43, 0x5e,
	0xc4, 0xa9, 0xe9, 0xb3, 0xaf, 0x1c, 0xde, 0x41, 0xd7, 0x15, 0xdb, 0x1f, 0x7e, 0x2e, 0x35, 0xe5,
	0x6a, 0xa9, 0x29, 0xbf, 0x97, 0x9a, 0xf2, 0x63, 0xa5, 0x65, 0xae, 0x56, 0x5a, 0xe6, 0xd7, 0x4a,
	0xcb, 0x7c, 0x7d, 0x3d, 0xe2, 0x72, 0x3c, 0x73, 0xea, 0xae, 0x3f, 0x69, 0xb8, 0xe8, 0xa1, 0x90,
	0x9c, 0xf9, 0xc1, 0x68, 0xb3, 0x2f, 0x1a, 0x72, 0x31, 0x45, 0xd1, 0x98, 0x3a, 0xd1, 0x72, 0x71,
	0xf2, 0xd1, 0xfa, 0x78, 0xf3, 0x27, 0x00, 0x00, 0xff, 0xff, 0x23, 0x32, 0x37, 0x5f, 0x70, 0x04,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DALCServiceClient is the client API for DALCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DALCServiceClient interface {
	SubmitBatch(ctx context.Context, in *SubmitBatchRequest, opts ...grpc.CallOption) (*SubmitBatchResponse, error)
	CheckBatchAvailability(ctx context.Context, in *CheckBatchAvailabilityRequest, opts ...grpc.CallOption) (*CheckBatchAvailabilityResponse, error)
	RetrieveBatches(ctx context.Context, in *RetrieveBatchesRequest, opts ...grpc.CallOption) (*RetrieveBatchesResponse, error)
}

type dALCServiceClient struct {
	cc *grpc.ClientConn
}

func NewDALCServiceClient(cc *grpc.ClientConn) DALCServiceClient {
	return &dALCServiceClient{cc}
}

func (c *dALCServiceClient) SubmitBatch(ctx context.Context, in *SubmitBatchRequest, opts ...grpc.CallOption) (*SubmitBatchResponse, error) {
	out := new(SubmitBatchResponse)
	err := c.cc.Invoke(ctx, "/dalc.DALCService/SubmitBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dALCServiceClient) CheckBatchAvailability(ctx context.Context, in *CheckBatchAvailabilityRequest, opts ...grpc.CallOption) (*CheckBatchAvailabilityResponse, error) {
	out := new(CheckBatchAvailabilityResponse)
	err := c.cc.Invoke(ctx, "/dalc.DALCService/CheckBatchAvailability", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dALCServiceClient) RetrieveBatches(ctx context.Context, in *RetrieveBatchesRequest, opts ...grpc.CallOption) (*RetrieveBatchesResponse, error) {
	out := new(RetrieveBatchesResponse)
	err := c.cc.Invoke(ctx, "/dalc.DALCService/RetrieveBatches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DALCServiceServer is the server API for DALCService service.
type DALCServiceServer interface {
	SubmitBatch(context.Context, *SubmitBatchRequest) (*SubmitBatchResponse, error)
	CheckBatchAvailability(context.Context, *CheckBatchAvailabilityRequest) (*CheckBatchAvailabilityResponse, error)
	RetrieveBatches(context.Context, *RetrieveBatchesRequest) (*RetrieveBatchesResponse, error)
}

// UnimplementedDALCServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDALCServiceServer struct {
}

func (*UnimplementedDALCServiceServer) SubmitBatch(ctx context.Context, req *SubmitBatchRequest) (*SubmitBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitBatch not implemented")
}
func (*UnimplementedDALCServiceServer) CheckBatchAvailability(ctx context.Context, req *CheckBatchAvailabilityRequest) (*CheckBatchAvailabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckBatchAvailability not implemented")
}
func (*UnimplementedDALCServiceServer) RetrieveBatches(ctx context.Context, req *RetrieveBatchesRequest) (*RetrieveBatchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveBatches not implemented")
}

func RegisterDALCServiceServer(s *grpc.Server, srv DALCServiceServer) {
	s.RegisterService(&_DALCService_serviceDesc, srv)
}

func _DALCService_SubmitBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DALCServiceServer).SubmitBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dalc.DALCService/SubmitBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DALCServiceServer).SubmitBatch(ctx, req.(*SubmitBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DALCService_CheckBatchAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckBatchAvailabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DALCServiceServer).CheckBatchAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dalc.DALCService/CheckBatchAvailability",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DALCServiceServer).CheckBatchAvailability(ctx, req.(*CheckBatchAvailabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DALCService_RetrieveBatches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveBatchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DALCServiceServer).RetrieveBatches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dalc.DALCService/RetrieveBatches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DALCServiceServer).RetrieveBatches(ctx, req.(*RetrieveBatchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DALCService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dalc.DALCService",
	HandlerType: (*DALCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitBatch",
			Handler:    _DALCService_SubmitBatch_Handler,
		},
		{
			MethodName: "CheckBatchAvailability",
			Handler:    _DALCService_CheckBatchAvailability_Handler,
		},
		{
			MethodName: "RetrieveBatches",
			Handler:    _DALCService_RetrieveBatches_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dalc/dalc.proto",
}

func (m *DAResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DAResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DAResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DataLayerHeight != 0 {
		i = encodeVarintDalc(dAtA, i, uint64(m.DataLayerHeight))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintDalc(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintDalc(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SubmitBatchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubmitBatchRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubmitBatchRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Block != nil {
		{
			size, err := m.Block.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDalc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SubmitBatchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubmitBatchResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubmitBatchResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDalc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CheckBatchAvailabilityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckBatchAvailabilityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckBatchAvailabilityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DataLayerHeight != 0 {
		i = encodeVarintDalc(dAtA, i, uint64(m.DataLayerHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CheckBatchAvailabilityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckBatchAvailabilityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckBatchAvailabilityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DataAvailable {
		i--
		if m.DataAvailable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDalc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveBatchesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveBatchesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveBatchesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DataLayerHeight != 0 {
		i = encodeVarintDalc(dAtA, i, uint64(m.DataLayerHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveBatchesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveBatchesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveBatchesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Blocks) > 0 {
		for iNdEx := len(m.Blocks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Blocks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDalc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDalc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDalc(dAtA []byte, offset int, v uint64) int {
	offset -= sovDalc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DAResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovDalc(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovDalc(uint64(l))
	}
	if m.DataLayerHeight != 0 {
		n += 1 + sovDalc(uint64(m.DataLayerHeight))
	}
	return n
}

func (m *SubmitBatchRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Block != nil {
		l = m.Block.Size()
		n += 1 + l + sovDalc(uint64(l))
	}
	return n
}

func (m *SubmitBatchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovDalc(uint64(l))
	}
	return n
}

func (m *CheckBatchAvailabilityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DataLayerHeight != 0 {
		n += 1 + sovDalc(uint64(m.DataLayerHeight))
	}
	return n
}

func (m *CheckBatchAvailabilityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovDalc(uint64(l))
	}
	if m.DataAvailable {
		n += 2
	}
	return n
}

func (m *RetrieveBatchesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DataLayerHeight != 0 {
		n += 1 + sovDalc(uint64(m.DataLayerHeight))
	}
	return n
}

func (m *RetrieveBatchesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovDalc(uint64(l))
	}
	if len(m.Blocks) > 0 {
		for _, e := range m.Blocks {
			l = e.Size()
			n += 1 + l + sovDalc(uint64(l))
		}
	}
	return n
}

func sovDalc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDalc(x uint64) (n int) {
	return sovDalc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DAResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDalc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DAResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DAResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDalc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= StatusCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDalc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDalc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDalc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataLayerHeight", wireType)
			}
			m.DataLayerHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDalc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataLayerHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDalc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDalc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubmitBatchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDalc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmitBatchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmitBatchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDalc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDalc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDalc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Block == nil {
				m.Block = &optimint.Block{}
			}
			if err := m.Block.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDalc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDalc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubmitBatchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDalc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmitBatchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmitBatchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDalc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDalc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDalc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &DAResponse{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDalc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDalc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckBatchAvailabilityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDalc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckBatchAvailabilityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckBatchAvailabilityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataLayerHeight", wireType)
			}
			m.DataLayerHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDalc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataLayerHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDalc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDalc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckBatchAvailabilityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDalc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckBatchAvailabilityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckBatchAvailabilityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDalc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDalc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDalc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &DAResponse{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataAvailable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDalc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DataAvailable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDalc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDalc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveBatchesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDalc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveBatchesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveBatchesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataLayerHeight", wireType)
			}
			m.DataLayerHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDalc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataLayerHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDalc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDalc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveBatchesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDalc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveBatchesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveBatchesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDalc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDalc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDalc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &DAResponse{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDalc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDalc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDalc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blocks = append(m.Blocks, &optimint.Block{})
			if err := m.Blocks[len(m.Blocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDalc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDalc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDalc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDalc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDalc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDalc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDalc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDalc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDalc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDalc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDalc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDalc = fmt.Errorf("proto: unexpected end of group")
)
