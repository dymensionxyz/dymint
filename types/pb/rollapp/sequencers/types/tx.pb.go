// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/rollapp/sequencers/types/tx.proto

package sequencers

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgUpdateRewardAddress struct {
	// Operator is the bech32-encoded address of the actor sending the update
	Operator string `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	// RewardAddr is a bech32 encoded sdk acc address
	RewardAddr string `protobuf:"bytes,2,opt,name=reward_addr,json=rewardAddr,proto3" json:"reward_addr,omitempty"`
}

func (m *MsgUpdateRewardAddress) Reset()         { *m = MsgUpdateRewardAddress{} }
func (m *MsgUpdateRewardAddress) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateRewardAddress) ProtoMessage()    {}
func (*MsgUpdateRewardAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb27942d1c1a6ff0, []int{0}
}
func (m *MsgUpdateRewardAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateRewardAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateRewardAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateRewardAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateRewardAddress.Merge(m, src)
}
func (m *MsgUpdateRewardAddress) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateRewardAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateRewardAddress.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateRewardAddress proto.InternalMessageInfo

func (m *MsgUpdateRewardAddress) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *MsgUpdateRewardAddress) GetRewardAddr() string {
	if m != nil {
		return m.RewardAddr
	}
	return ""
}

type MsgUpdateRewardAddressResponse struct {
}

func (m *MsgUpdateRewardAddressResponse) Reset()         { *m = MsgUpdateRewardAddressResponse{} }
func (m *MsgUpdateRewardAddressResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateRewardAddressResponse) ProtoMessage()    {}
func (*MsgUpdateRewardAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb27942d1c1a6ff0, []int{1}
}
func (m *MsgUpdateRewardAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateRewardAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateRewardAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateRewardAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateRewardAddressResponse.Merge(m, src)
}
func (m *MsgUpdateRewardAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateRewardAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateRewardAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateRewardAddressResponse proto.InternalMessageInfo

type MsgUpdateWhitelistedRelayers struct {
	// Operator is the bech32-encoded address of the actor sending the update
	Operator string `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	// Relayers is an array of the whitelisted relayer addresses. Addresses are bech32-encoded strings.
	Relayers []string `protobuf:"bytes,2,rep,name=relayers,proto3" json:"relayers,omitempty"`
}

func (m *MsgUpdateWhitelistedRelayers) Reset()         { *m = MsgUpdateWhitelistedRelayers{} }
func (m *MsgUpdateWhitelistedRelayers) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateWhitelistedRelayers) ProtoMessage()    {}
func (*MsgUpdateWhitelistedRelayers) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb27942d1c1a6ff0, []int{2}
}
func (m *MsgUpdateWhitelistedRelayers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateWhitelistedRelayers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateWhitelistedRelayers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateWhitelistedRelayers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateWhitelistedRelayers.Merge(m, src)
}
func (m *MsgUpdateWhitelistedRelayers) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateWhitelistedRelayers) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateWhitelistedRelayers.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateWhitelistedRelayers proto.InternalMessageInfo

func (m *MsgUpdateWhitelistedRelayers) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *MsgUpdateWhitelistedRelayers) GetRelayers() []string {
	if m != nil {
		return m.Relayers
	}
	return nil
}

type MsgUpdateWhitelistedRelayersResponse struct {
}

func (m *MsgUpdateWhitelistedRelayersResponse) Reset()         { *m = MsgUpdateWhitelistedRelayersResponse{} }
func (m *MsgUpdateWhitelistedRelayersResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateWhitelistedRelayersResponse) ProtoMessage()    {}
func (*MsgUpdateWhitelistedRelayersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb27942d1c1a6ff0, []int{3}
}
func (m *MsgUpdateWhitelistedRelayersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateWhitelistedRelayersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateWhitelistedRelayersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateWhitelistedRelayersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateWhitelistedRelayersResponse.Merge(m, src)
}
func (m *MsgUpdateWhitelistedRelayersResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateWhitelistedRelayersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateWhitelistedRelayersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateWhitelistedRelayersResponse proto.InternalMessageInfo

// ConsensusMsgUpsertSequencer is a consensus message to upsert the sequencer.
type ConsensusMsgUpsertSequencer struct {
	// Operator is the bech32-encoded address of the actor sending the update
	Operator string `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	// ConsPubKey is a tendermint consensus pub key
	ConsPubKey *types.Any `protobuf:"bytes,2,opt,name=cons_pub_key,json=consPubKey,proto3" json:"cons_pub_key,omitempty"`
	// RewardAddr is the bech32-encoded sequencer's reward address
	RewardAddr string `protobuf:"bytes,3,opt,name=reward_addr,json=rewardAddr,proto3" json:"reward_addr,omitempty"`
	// Relayers is an array of the whitelisted relayer addresses. Addresses are bech32-encoded strings.
	Relayers []string `protobuf:"bytes,4,rep,name=relayers,proto3" json:"relayers,omitempty"`
}

func (m *ConsensusMsgUpsertSequencer) Reset()         { *m = ConsensusMsgUpsertSequencer{} }
func (m *ConsensusMsgUpsertSequencer) String() string { return proto.CompactTextString(m) }
func (*ConsensusMsgUpsertSequencer) ProtoMessage()    {}
func (*ConsensusMsgUpsertSequencer) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb27942d1c1a6ff0, []int{4}
}
func (m *ConsensusMsgUpsertSequencer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsensusMsgUpsertSequencer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsensusMsgUpsertSequencer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsensusMsgUpsertSequencer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusMsgUpsertSequencer.Merge(m, src)
}
func (m *ConsensusMsgUpsertSequencer) XXX_Size() int {
	return m.Size()
}
func (m *ConsensusMsgUpsertSequencer) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusMsgUpsertSequencer.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusMsgUpsertSequencer proto.InternalMessageInfo

func (m *ConsensusMsgUpsertSequencer) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *ConsensusMsgUpsertSequencer) GetConsPubKey() *types.Any {
	if m != nil {
		return m.ConsPubKey
	}
	return nil
}

func (m *ConsensusMsgUpsertSequencer) GetRewardAddr() string {
	if m != nil {
		return m.RewardAddr
	}
	return ""
}

func (m *ConsensusMsgUpsertSequencer) GetRelayers() []string {
	if m != nil {
		return m.Relayers
	}
	return nil
}

type ConsensusMsgUpsertSequencerResponse struct {
}

func (m *ConsensusMsgUpsertSequencerResponse) Reset()         { *m = ConsensusMsgUpsertSequencerResponse{} }
func (m *ConsensusMsgUpsertSequencerResponse) String() string { return proto.CompactTextString(m) }
func (*ConsensusMsgUpsertSequencerResponse) ProtoMessage()    {}
func (*ConsensusMsgUpsertSequencerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb27942d1c1a6ff0, []int{5}
}
func (m *ConsensusMsgUpsertSequencerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsensusMsgUpsertSequencerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsensusMsgUpsertSequencerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsensusMsgUpsertSequencerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusMsgUpsertSequencerResponse.Merge(m, src)
}
func (m *ConsensusMsgUpsertSequencerResponse) XXX_Size() int {
	return m.Size()
}
func (m *ConsensusMsgUpsertSequencerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusMsgUpsertSequencerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusMsgUpsertSequencerResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgUpdateRewardAddress)(nil), "rollapp.sequencers.types.MsgUpdateRewardAddress")
	proto.RegisterType((*MsgUpdateRewardAddressResponse)(nil), "rollapp.sequencers.types.MsgUpdateRewardAddressResponse")
	proto.RegisterType((*MsgUpdateWhitelistedRelayers)(nil), "rollapp.sequencers.types.MsgUpdateWhitelistedRelayers")
	proto.RegisterType((*MsgUpdateWhitelistedRelayersResponse)(nil), "rollapp.sequencers.types.MsgUpdateWhitelistedRelayersResponse")
	proto.RegisterType((*ConsensusMsgUpsertSequencer)(nil), "rollapp.sequencers.types.ConsensusMsgUpsertSequencer")
	proto.RegisterType((*ConsensusMsgUpsertSequencerResponse)(nil), "rollapp.sequencers.types.ConsensusMsgUpsertSequencerResponse")
}

func init() {
	proto.RegisterFile("types/rollapp/sequencers/types/tx.proto", fileDescriptor_bb27942d1c1a6ff0)
}

var fileDescriptor_bb27942d1c1a6ff0 = []byte{
	// 400 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xcd, 0xea, 0xd3, 0x40,
	0x14, 0xc5, 0x9b, 0xff, 0x5f, 0xa4, 0x4e, 0x75, 0x53, 0x8a, 0xc4, 0xa8, 0xb1, 0xc4, 0x4f, 0x5c,
	0x64, 0x50, 0xc1, 0x45, 0x77, 0xd5, 0xa5, 0x08, 0x12, 0x15, 0xc1, 0x4d, 0x49, 0x32, 0xd7, 0x34,
	0x98, 0xcc, 0x8c, 0x73, 0x27, 0xda, 0x71, 0xe9, 0x13, 0xf8, 0x24, 0xe2, 0x63, 0xb8, 0xec, 0xd2,
	0xa5, 0xb4, 0x0b, 0x5f, 0x43, 0x32, 0xf9, 0x90, 0x96, 0x92, 0xd5, 0xcc, 0xe5, 0xfc, 0x2e, 0x73,
	0xce, 0xbd, 0x43, 0xee, 0x6b, 0x23, 0x01, 0xa9, 0x12, 0x45, 0x11, 0x4b, 0x49, 0x11, 0x3e, 0x55,
	0xc0, 0x53, 0x50, 0x48, 0x1b, 0x41, 0x6f, 0x42, 0xa9, 0x84, 0x16, 0x53, 0xb7, 0x45, 0xc2, 0xff,
	0x48, 0x68, 0x11, 0x6f, 0x96, 0x89, 0x4c, 0x58, 0x88, 0xd6, 0xb7, 0x86, 0xf7, 0x6e, 0x36, 0xfd,
	0xa9, 0xc0, 0x52, 0x20, 0x2d, 0x31, 0xa3, 0x9f, 0x1f, 0xd5, 0x47, 0x2b, 0x5f, 0xcb, 0x84, 0xc8,
	0x0a, 0xa0, 0xb6, 0x4a, 0xaa, 0x0f, 0x34, 0xe6, 0xa6, 0x91, 0x02, 0x46, 0xae, 0xbe, 0xc4, 0xec,
	0xad, 0x64, 0xb1, 0x86, 0x08, 0xbe, 0xc4, 0x8a, 0x2d, 0x19, 0x53, 0x80, 0x38, 0xf5, 0xc8, 0x58,
	0x48, 0x50, 0xb1, 0x16, 0xca, 0x75, 0xe6, 0xce, 0x83, 0x4b, 0x51, 0x5f, 0x4f, 0x6f, 0x91, 0x89,
	0xb2, 0xf0, 0x2a, 0x66, 0x4c, 0xb9, 0x67, 0x56, 0x26, 0xaa, 0xef, 0x5f, 0x5c, 0xf9, 0xf6, 0xf7,
	0xe7, 0xc3, 0x9e, 0x0f, 0xe6, 0xc4, 0x3f, 0xfd, 0x4a, 0x04, 0x28, 0x05, 0x47, 0x08, 0x80, 0xdc,
	0xe8, 0x89, 0x77, 0xeb, 0x5c, 0x43, 0x91, 0xa3, 0x06, 0x16, 0x41, 0x11, 0x1b, 0x50, 0xc3, 0x6e,
	0x3c, 0x32, 0x56, 0x2d, 0xe7, 0x9e, 0xcd, 0xcf, 0x6b, 0xad, 0xab, 0x8f, 0x8d, 0xdc, 0x23, 0x77,
	0x86, 0x9e, 0xe9, 0xed, 0xfc, 0x70, 0xc8, 0xf5, 0xe7, 0xf5, 0x8d, 0x63, 0x85, 0xb6, 0x03, 0x41,
	0xe9, 0xd7, 0xdd, 0x36, 0x06, 0xed, 0x3c, 0x25, 0x97, 0x53, 0xc1, 0x71, 0x25, 0xab, 0x64, 0xf5,
	0x11, 0x8c, 0x9d, 0xce, 0xe4, 0xf1, 0x2c, 0x6c, 0x96, 0x10, 0x76, 0x4b, 0x08, 0x97, 0xdc, 0x44,
	0xa4, 0x26, 0x5f, 0x55, 0xc9, 0x0b, 0x30, 0xc7, 0x43, 0x3d, 0x3f, 0x1e, 0xea, 0x41, 0xce, 0x0b,
	0x87, 0x39, 0x83, 0xbb, 0xe4, 0xf6, 0x80, 0xdf, 0x2e, 0xd7, 0xb3, 0x37, 0xbf, 0x76, 0xbe, 0xb3,
	0xdd, 0xf9, 0xce, 0x9f, 0x9d, 0xef, 0x7c, 0xdf, 0xfb, 0xa3, 0xed, 0xde, 0x1f, 0xfd, 0xde, 0xfb,
	0xa3, 0xf7, 0x8b, 0x2c, 0xd7, 0xeb, 0x2a, 0x09, 0x53, 0x51, 0x52, 0x66, 0x4a, 0xe0, 0x98, 0x0b,
	0xbe, 0x31, 0x5f, 0xeb, 0x22, 0xe7, 0xba, 0xfd, 0xa1, 0x32, 0x39, 0xf1, 0x7b, 0x93, 0x8b, 0x36,
	0xd3, 0x93, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xae, 0x33, 0x00, 0x54, 0xe0, 0x02, 0x00, 0x00,
}

func (m *MsgUpdateRewardAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateRewardAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateRewardAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardAddr) > 0 {
		i -= len(m.RewardAddr)
		copy(dAtA[i:], m.RewardAddr)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RewardAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateRewardAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateRewardAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateRewardAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateWhitelistedRelayers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateWhitelistedRelayers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateWhitelistedRelayers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Relayers) > 0 {
		for iNdEx := len(m.Relayers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Relayers[iNdEx])
			copy(dAtA[i:], m.Relayers[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Relayers[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateWhitelistedRelayersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateWhitelistedRelayersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateWhitelistedRelayersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ConsensusMsgUpsertSequencer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusMsgUpsertSequencer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsensusMsgUpsertSequencer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Relayers) > 0 {
		for iNdEx := len(m.Relayers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Relayers[iNdEx])
			copy(dAtA[i:], m.Relayers[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Relayers[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.RewardAddr) > 0 {
		i -= len(m.RewardAddr)
		copy(dAtA[i:], m.RewardAddr)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RewardAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ConsPubKey != nil {
		{
			size, err := m.ConsPubKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConsensusMsgUpsertSequencerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusMsgUpsertSequencerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsensusMsgUpsertSequencerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUpdateRewardAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RewardAddr)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateRewardAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateWhitelistedRelayers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Relayers) > 0 {
		for _, s := range m.Relayers {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgUpdateWhitelistedRelayersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ConsensusMsgUpsertSequencer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ConsPubKey != nil {
		l = m.ConsPubKey.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RewardAddr)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Relayers) > 0 {
		for _, s := range m.Relayers {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *ConsensusMsgUpsertSequencerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUpdateRewardAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateRewardAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateRewardAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateRewardAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateRewardAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateRewardAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateWhitelistedRelayers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateWhitelistedRelayers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateWhitelistedRelayers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relayers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Relayers = append(m.Relayers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateWhitelistedRelayersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateWhitelistedRelayersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateWhitelistedRelayersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsensusMsgUpsertSequencer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsensusMsgUpsertSequencer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsensusMsgUpsertSequencer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsPubKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConsPubKey == nil {
				m.ConsPubKey = &types.Any{}
			}
			if err := m.ConsPubKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relayers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Relayers = append(m.Relayers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsensusMsgUpsertSequencerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsensusMsgUpsertSequencerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsensusMsgUpsertSequencerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
