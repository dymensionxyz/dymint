// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/interchain_da/da.proto

package interchain_da

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Params struct {
	// CostPerByte defines the coin cost to store each byte of the blob. This
	// allows for multidimensional gas pricing on different resources of the
	// network.
	CostPerByte types.Coin `protobuf:"bytes,1,opt,name=cost_per_byte,json=costPerByte,proto3" json:"cost_per_byte"`
	// MaxBlobSize is the hard cap of how many bytes a blob can be.
	MaxBlobSize uint32 `protobuf:"varint,2,opt,name=max_blob_size,json=maxBlobSize,proto3" json:"max_blob_size,omitempty"`
	// DisputePeriod is the number of blocks the blob is stored for.
	DisputePeriod uint64 `protobuf:"varint,3,opt,name=dispute_period,json=disputePeriod,proto3" json:"dispute_period,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9a26af1837c1a56, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetCostPerByte() types.Coin {
	if m != nil {
		return m.CostPerByte
	}
	return types.Coin{}
}

func (m *Params) GetMaxBlobSize() uint32 {
	if m != nil {
		return m.MaxBlobSize
	}
	return 0
}

func (m *Params) GetDisputePeriod() uint64 {
	if m != nil {
		return m.DisputePeriod
	}
	return 0
}

// BlobMetadata holds blob metadata, which is stored in the state.
type BlobMetadata struct {
	// BlobHash is the hash of the submitted blob.
	BlobHash string `protobuf:"bytes,1,opt,name=blob_hash,json=blobHash,proto3" json:"blob_hash,omitempty"`
}

func (m *BlobMetadata) Reset()         { *m = BlobMetadata{} }
func (m *BlobMetadata) String() string { return proto.CompactTextString(m) }
func (*BlobMetadata) ProtoMessage()    {}
func (*BlobMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9a26af1837c1a56, []int{1}
}
func (m *BlobMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlobMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlobMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlobMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlobMetadata.Merge(m, src)
}
func (m *BlobMetadata) XXX_Size() int {
	return m.Size()
}
func (m *BlobMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_BlobMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_BlobMetadata proto.InternalMessageInfo

func (m *BlobMetadata) GetBlobHash() string {
	if m != nil {
		return m.BlobHash
	}
	return ""
}

func init() {
	proto.RegisterType((*Params)(nil), "dymension.interchain_da.Params")
	proto.RegisterType((*BlobMetadata)(nil), "dymension.interchain_da.BlobMetadata")
}

func init() { proto.RegisterFile("types/interchain_da/da.proto", fileDescriptor_c9a26af1837c1a56) }

var fileDescriptor_c9a26af1837c1a56 = []byte{
	// 325 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xc1, 0x4a, 0xc3, 0x30,
	0x1c, 0xc6, 0x1b, 0x1d, 0xc3, 0x75, 0xd6, 0x43, 0x11, 0x9c, 0x53, 0xea, 0x18, 0x0a, 0x03, 0x21,
	0x61, 0x8a, 0x2f, 0xd0, 0x5d, 0xbc, 0x88, 0xa3, 0xde, 0xbc, 0x94, 0x7f, 0xda, 0xb0, 0x06, 0xd6,
	0xfc, 0x4b, 0x93, 0xc9, 0xba, 0xa7, 0xf0, 0xe8, 0x23, 0xed, 0xb8, 0xa3, 0x27, 0x91, 0xed, 0x45,
	0x24, 0xed, 0x10, 0x76, 0x4b, 0x3e, 0xbe, 0xef, 0x97, 0xf0, 0x73, 0xaf, 0x4d, 0x55, 0x08, 0xcd,
	0xa4, 0x32, 0xa2, 0x4c, 0x32, 0x90, 0x2a, 0x4e, 0x81, 0xa5, 0x40, 0x8b, 0x12, 0x0d, 0xfa, 0x17,
	0x69, 0x95, 0x0b, 0xa5, 0x25, 0x2a, 0x7a, 0xd0, 0xe8, 0x9f, 0xcf, 0x70, 0x86, 0x75, 0x87, 0xd9,
	0x53, 0x53, 0xef, 0xdf, 0x36, 0xb0, 0x04, 0x75, 0x8e, 0x9a, 0x71, 0xd0, 0x82, 0x7d, 0x8c, 0xb9,
	0x30, 0x30, 0x66, 0x09, 0x4a, 0xd5, 0xb4, 0x86, 0x5f, 0xc4, 0x6d, 0x4f, 0xa1, 0x84, 0x5c, 0xfb,
	0x13, 0xd7, 0x4b, 0x50, 0x9b, 0xb8, 0x10, 0x65, 0xcc, 0x2b, 0x23, 0x7a, 0x64, 0x40, 0x46, 0xdd,
	0x87, 0x4b, 0xda, 0x20, 0xa8, 0x45, 0xd0, 0x3d, 0x82, 0x4e, 0x50, 0xaa, 0xb0, 0xb5, 0xfe, 0xb9,
	0x71, 0xa2, 0xae, 0x5d, 0x4d, 0x45, 0x19, 0x56, 0x46, 0xf8, 0x43, 0xd7, 0xcb, 0x61, 0x19, 0xf3,
	0x39, 0xf2, 0x58, 0xcb, 0x95, 0xe8, 0x1d, 0x0d, 0xc8, 0xc8, 0x8b, 0xba, 0x39, 0x2c, 0xc3, 0x39,
	0xf2, 0x37, 0xb9, 0x12, 0xfe, 0x9d, 0x7b, 0x96, 0x4a, 0x5d, 0x2c, 0x8c, 0xb0, 0x6f, 0x49, 0x4c,
	0x7b, 0xc7, 0x03, 0x32, 0x6a, 0x45, 0xde, 0x3e, 0x9d, 0xd6, 0xe1, 0xf0, 0xde, 0x3d, 0xb5, 0x93,
	0x17, 0x61, 0x20, 0x05, 0x03, 0xfe, 0x95, 0xdb, 0xa9, 0xb1, 0x19, 0xe8, 0xac, 0xfe, 0x5b, 0x27,
	0x3a, 0xb1, 0xc1, 0x33, 0xe8, 0x2c, 0x7c, 0x5d, 0x6f, 0x03, 0xb2, 0xd9, 0x06, 0xe4, 0x77, 0x1b,
	0x90, 0xcf, 0x5d, 0xe0, 0x6c, 0x76, 0x81, 0xf3, 0xbd, 0x0b, 0x9c, 0xf7, 0xa7, 0x99, 0x34, 0xd9,
	0x82, 0xd3, 0x04, 0x73, 0xf6, 0x6f, 0x70, 0x59, 0xad, 0xec, 0x45, 0x2a, 0xc3, 0x1a, 0x4d, 0x05,
	0x3f, 0xd4, 0xce, 0xdb, 0xb5, 0x9f, 0xc7, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x87, 0xa2, 0x93,
	0xfe, 0x94, 0x01, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DisputePeriod != 0 {
		i = encodeVarintDa(dAtA, i, uint64(m.DisputePeriod))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxBlobSize != 0 {
		i = encodeVarintDa(dAtA, i, uint64(m.MaxBlobSize))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.CostPerByte.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDa(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *BlobMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlobMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlobMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BlobHash) > 0 {
		i -= len(m.BlobHash)
		copy(dAtA[i:], m.BlobHash)
		i = encodeVarintDa(dAtA, i, uint64(len(m.BlobHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDa(dAtA []byte, offset int, v uint64) int {
	offset -= sovDa(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CostPerByte.Size()
	n += 1 + l + sovDa(uint64(l))
	if m.MaxBlobSize != 0 {
		n += 1 + sovDa(uint64(m.MaxBlobSize))
	}
	if m.DisputePeriod != 0 {
		n += 1 + sovDa(uint64(m.DisputePeriod))
	}
	return n
}

func (m *BlobMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BlobHash)
	if l > 0 {
		n += 1 + l + sovDa(uint64(l))
	}
	return n
}

func sovDa(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDa(x uint64) (n int) {
	return sovDa(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDa
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CostPerByte", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDa
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CostPerByte.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxBlobSize", wireType)
			}
			m.MaxBlobSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxBlobSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputePeriod", wireType)
			}
			m.DisputePeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisputePeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDa(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDa
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlobMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDa
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlobMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlobMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlobHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDa
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlobHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDa(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDa
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDa(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDa
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDa
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDa
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDa
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDa
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDa
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDa        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDa          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDa = fmt.Errorf("proto: unexpected end of group")
)
