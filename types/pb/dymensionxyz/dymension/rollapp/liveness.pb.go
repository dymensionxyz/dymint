// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/dymensionxyz/dymension/rollapp/liveness.proto

package rollapp

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// LivenessEvent stores upcoming slash/jail actions on sequencers of rollapps
type LivenessEvent struct {
	// RollappId of relevant rollapp
	RollappId string `protobuf:"bytes,1,opt,name=rollapp_id,json=rollappId,proto3" json:"rollapp_id,omitempty"`
	// HubHeight when event will occur
	HubHeight int64 `protobuf:"varint,2,opt,name=hub_height,json=hubHeight,proto3" json:"hub_height,omitempty"`
	// IsJail is true iff the event is to jail rather than slash
	IsJail bool `protobuf:"varint,3,opt,name=is_jail,json=isJail,proto3" json:"is_jail,omitempty"`
}

func (m *LivenessEvent) Reset()         { *m = LivenessEvent{} }
func (m *LivenessEvent) String() string { return proto.CompactTextString(m) }
func (*LivenessEvent) ProtoMessage()    {}
func (*LivenessEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_320371ac4381dc1d, []int{0}
}
func (m *LivenessEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LivenessEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LivenessEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LivenessEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LivenessEvent.Merge(m, src)
}
func (m *LivenessEvent) XXX_Size() int {
	return m.Size()
}
func (m *LivenessEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_LivenessEvent.DiscardUnknown(m)
}

var xxx_messageInfo_LivenessEvent proto.InternalMessageInfo

func (m *LivenessEvent) GetRollappId() string {
	if m != nil {
		return m.RollappId
	}
	return ""
}

func (m *LivenessEvent) GetHubHeight() int64 {
	if m != nil {
		return m.HubHeight
	}
	return 0
}

func (m *LivenessEvent) GetIsJail() bool {
	if m != nil {
		return m.IsJail
	}
	return false
}

func init() {
	proto.RegisterType((*LivenessEvent)(nil), "dymensionxyz.dymension.rollapp.LivenessEvent")
}

func init() {
	proto.RegisterFile("types/dymensionxyz/dymension/rollapp/liveness.proto", fileDescriptor_320371ac4381dc1d)
}

var fileDescriptor_320371ac4381dc1d = []byte{
	// 277 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0xcd, 0x4a, 0xc4, 0x30,
	0x14, 0x85, 0x1b, 0x07, 0x46, 0x5b, 0x70, 0x53, 0x04, 0xcb, 0x80, 0xa1, 0x88, 0x8b, 0xae, 0x1a,
	0x86, 0xc1, 0x17, 0x10, 0x14, 0x15, 0x57, 0x5d, 0xba, 0xa9, 0x49, 0x9b, 0x69, 0xaf, 0xb4, 0x49,
	0x99, 0x9b, 0x16, 0xeb, 0x53, 0xf8, 0x58, 0x2e, 0x67, 0xe9, 0x52, 0xda, 0x17, 0x91, 0x69, 0xeb,
	0x0f, 0xb8, 0xd0, 0x5d, 0xce, 0xc9, 0x77, 0x92, 0x7b, 0xae, 0xb3, 0x32, 0x6d, 0x25, 0x91, 0xa5,
	0x6d, 0x29, 0x15, 0x82, 0x56, 0x4f, 0xed, 0xf3, 0xb7, 0x60, 0x1b, 0x5d, 0x14, 0xbc, 0xaa, 0x58,
	0x01, 0x8d, 0x54, 0x12, 0x31, 0xac, 0x36, 0xda, 0x68, 0x97, 0xfe, 0xc4, 0xc3, 0x2f, 0x11, 0x4e,
	0xf8, 0xe2, 0x28, 0xd3, 0x99, 0x1e, 0x50, 0xb6, 0x3b, 0x8d, 0xa9, 0xc5, 0xf9, 0xbf, 0xbe, 0x42,
	0xc3, 0x8d, 0x8c, 0x41, 0xad, 0x3f, 0x63, 0x67, 0x63, 0x2c, 0xd1, 0x58, 0x6a, 0x64, 0x82, 0xa3,
	0x64, 0xcd, 0x52, 0x48, 0xc3, 0x97, 0x2c, 0xd1, 0xa0, 0x46, 0xea, 0x74, 0xed, 0x1c, 0xde, 0x4d,
	0x43, 0x5e, 0x36, 0x52, 0x19, 0xf7, 0xc4, 0x71, 0xa6, 0x27, 0x63, 0x48, 0x3d, 0xe2, 0x93, 0xc0,
	0x8e, 0xec, 0xc9, 0xb9, 0x49, 0x77, 0xd7, 0x79, 0x2d, 0xe2, 0x5c, 0x42, 0x96, 0x1b, 0x6f, 0xcf,
	0x27, 0xc1, 0x2c, 0xb2, 0xf3, 0x5a, 0x5c, 0x0f, 0x86, 0x7b, 0xec, 0xec, 0x03, 0xc6, 0x8f, 0x1c,
	0x0a, 0x6f, 0xe6, 0x93, 0xe0, 0x20, 0x9a, 0x03, 0xde, 0x72, 0x28, 0x2e, 0x1e, 0x5e, 0x3b, 0x4a,
	0xb6, 0x1d, 0x25, 0xef, 0x1d, 0x25, 0x2f, 0x3d, 0xb5, 0xb6, 0x3d, 0xb5, 0xde, 0x7a, 0x6a, 0xdd,
	0x5f, 0x65, 0x60, 0xf2, 0x5a, 0x84, 0x89, 0x2e, 0x7f, 0x75, 0x04, 0x65, 0xd8, 0x58, 0xa3, 0x12,
	0x7f, 0x2c, 0x40, 0xcc, 0x87, 0x42, 0xab, 0x8f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x49, 0x75, 0xbc,
	0x39, 0x9a, 0x01, 0x00, 0x00,
}

func (m *LivenessEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LivenessEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LivenessEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsJail {
		i--
		if m.IsJail {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.HubHeight != 0 {
		i = encodeVarintLiveness(dAtA, i, uint64(m.HubHeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RollappId) > 0 {
		i -= len(m.RollappId)
		copy(dAtA[i:], m.RollappId)
		i = encodeVarintLiveness(dAtA, i, uint64(len(m.RollappId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLiveness(dAtA []byte, offset int, v uint64) int {
	offset -= sovLiveness(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LivenessEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RollappId)
	if l > 0 {
		n += 1 + l + sovLiveness(uint64(l))
	}
	if m.HubHeight != 0 {
		n += 1 + sovLiveness(uint64(m.HubHeight))
	}
	if m.IsJail {
		n += 2
	}
	return n
}

func sovLiveness(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLiveness(x uint64) (n int) {
	return sovLiveness(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LivenessEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiveness
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LivenessEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LivenessEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollappId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiveness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiveness
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiveness
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollappId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HubHeight", wireType)
			}
			m.HubHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiveness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HubHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsJail", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiveness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsJail = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLiveness(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiveness
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLiveness(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLiveness
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLiveness
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLiveness
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLiveness
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLiveness
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLiveness
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLiveness        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLiveness          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLiveness = fmt.Errorf("proto: unexpected end of group")
)
