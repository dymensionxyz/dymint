// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package sequencer

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
)

// NewMockQueryClient creates a new instance of MockQueryClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQueryClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQueryClient {
	mock := &MockQueryClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockQueryClient is an autogenerated mock type for the QueryClient type
type MockQueryClient struct {
	mock.Mock
}

type MockQueryClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQueryClient) EXPECT() *MockQueryClient_Expecter {
	return &MockQueryClient_Expecter{mock: &_m.Mock}
}

// GetNextProposerByRollapp provides a mock function for the type MockQueryClient
func (_mock *MockQueryClient) GetNextProposerByRollapp(ctx context.Context, in *QueryGetNextProposerByRollappRequest, opts ...grpc.CallOption) (*QueryGetNextProposerByRollappResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetNextProposerByRollapp")
	}

	var r0 *QueryGetNextProposerByRollappResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *QueryGetNextProposerByRollappRequest, ...grpc.CallOption) (*QueryGetNextProposerByRollappResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *QueryGetNextProposerByRollappRequest, ...grpc.CallOption) *QueryGetNextProposerByRollappResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*QueryGetNextProposerByRollappResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *QueryGetNextProposerByRollappRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQueryClient_GetNextProposerByRollapp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNextProposerByRollapp'
type MockQueryClient_GetNextProposerByRollapp_Call struct {
	*mock.Call
}

// GetNextProposerByRollapp is a helper method to define mock.On call
//   - ctx context.Context
//   - in *QueryGetNextProposerByRollappRequest
//   - opts ...grpc.CallOption
func (_e *MockQueryClient_Expecter) GetNextProposerByRollapp(ctx interface{}, in interface{}, opts ...interface{}) *MockQueryClient_GetNextProposerByRollapp_Call {
	return &MockQueryClient_GetNextProposerByRollapp_Call{Call: _e.mock.On("GetNextProposerByRollapp",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockQueryClient_GetNextProposerByRollapp_Call) Run(run func(ctx context.Context, in *QueryGetNextProposerByRollappRequest, opts ...grpc.CallOption)) *MockQueryClient_GetNextProposerByRollapp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *QueryGetNextProposerByRollappRequest
		if args[1] != nil {
			arg1 = args[1].(*QueryGetNextProposerByRollappRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockQueryClient_GetNextProposerByRollapp_Call) Return(queryGetNextProposerByRollappResponse *QueryGetNextProposerByRollappResponse, err error) *MockQueryClient_GetNextProposerByRollapp_Call {
	_c.Call.Return(queryGetNextProposerByRollappResponse, err)
	return _c
}

func (_c *MockQueryClient_GetNextProposerByRollapp_Call) RunAndReturn(run func(ctx context.Context, in *QueryGetNextProposerByRollappRequest, opts ...grpc.CallOption) (*QueryGetNextProposerByRollappResponse, error)) *MockQueryClient_GetNextProposerByRollapp_Call {
	_c.Call.Return(run)
	return _c
}

// GetProposerByRollapp provides a mock function for the type MockQueryClient
func (_mock *MockQueryClient) GetProposerByRollapp(ctx context.Context, in *QueryGetProposerByRollappRequest, opts ...grpc.CallOption) (*QueryGetProposerByRollappResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetProposerByRollapp")
	}

	var r0 *QueryGetProposerByRollappResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *QueryGetProposerByRollappRequest, ...grpc.CallOption) (*QueryGetProposerByRollappResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *QueryGetProposerByRollappRequest, ...grpc.CallOption) *QueryGetProposerByRollappResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*QueryGetProposerByRollappResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *QueryGetProposerByRollappRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQueryClient_GetProposerByRollapp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProposerByRollapp'
type MockQueryClient_GetProposerByRollapp_Call struct {
	*mock.Call
}

// GetProposerByRollapp is a helper method to define mock.On call
//   - ctx context.Context
//   - in *QueryGetProposerByRollappRequest
//   - opts ...grpc.CallOption
func (_e *MockQueryClient_Expecter) GetProposerByRollapp(ctx interface{}, in interface{}, opts ...interface{}) *MockQueryClient_GetProposerByRollapp_Call {
	return &MockQueryClient_GetProposerByRollapp_Call{Call: _e.mock.On("GetProposerByRollapp",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockQueryClient_GetProposerByRollapp_Call) Run(run func(ctx context.Context, in *QueryGetProposerByRollappRequest, opts ...grpc.CallOption)) *MockQueryClient_GetProposerByRollapp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *QueryGetProposerByRollappRequest
		if args[1] != nil {
			arg1 = args[1].(*QueryGetProposerByRollappRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockQueryClient_GetProposerByRollapp_Call) Return(queryGetProposerByRollappResponse *QueryGetProposerByRollappResponse, err error) *MockQueryClient_GetProposerByRollapp_Call {
	_c.Call.Return(queryGetProposerByRollappResponse, err)
	return _c
}

func (_c *MockQueryClient_GetProposerByRollapp_Call) RunAndReturn(run func(ctx context.Context, in *QueryGetProposerByRollappRequest, opts ...grpc.CallOption) (*QueryGetProposerByRollappResponse, error)) *MockQueryClient_GetProposerByRollapp_Call {
	_c.Call.Return(run)
	return _c
}

// Params provides a mock function for the type MockQueryClient
func (_mock *MockQueryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Params")
	}

	var r0 *QueryParamsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *QueryParamsRequest, ...grpc.CallOption) (*QueryParamsResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *QueryParamsRequest, ...grpc.CallOption) *QueryParamsResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*QueryParamsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *QueryParamsRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQueryClient_Params_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Params'
type MockQueryClient_Params_Call struct {
	*mock.Call
}

// Params is a helper method to define mock.On call
//   - ctx context.Context
//   - in *QueryParamsRequest
//   - opts ...grpc.CallOption
func (_e *MockQueryClient_Expecter) Params(ctx interface{}, in interface{}, opts ...interface{}) *MockQueryClient_Params_Call {
	return &MockQueryClient_Params_Call{Call: _e.mock.On("Params",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockQueryClient_Params_Call) Run(run func(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption)) *MockQueryClient_Params_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *QueryParamsRequest
		if args[1] != nil {
			arg1 = args[1].(*QueryParamsRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockQueryClient_Params_Call) Return(queryParamsResponse *QueryParamsResponse, err error) *MockQueryClient_Params_Call {
	_c.Call.Return(queryParamsResponse, err)
	return _c
}

func (_c *MockQueryClient_Params_Call) RunAndReturn(run func(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)) *MockQueryClient_Params_Call {
	_c.Call.Return(run)
	return _c
}

// Proposers provides a mock function for the type MockQueryClient
func (_mock *MockQueryClient) Proposers(ctx context.Context, in *QueryProposersRequest, opts ...grpc.CallOption) (*QueryProposersResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Proposers")
	}

	var r0 *QueryProposersResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *QueryProposersRequest, ...grpc.CallOption) (*QueryProposersResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *QueryProposersRequest, ...grpc.CallOption) *QueryProposersResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*QueryProposersResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *QueryProposersRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQueryClient_Proposers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Proposers'
type MockQueryClient_Proposers_Call struct {
	*mock.Call
}

// Proposers is a helper method to define mock.On call
//   - ctx context.Context
//   - in *QueryProposersRequest
//   - opts ...grpc.CallOption
func (_e *MockQueryClient_Expecter) Proposers(ctx interface{}, in interface{}, opts ...interface{}) *MockQueryClient_Proposers_Call {
	return &MockQueryClient_Proposers_Call{Call: _e.mock.On("Proposers",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockQueryClient_Proposers_Call) Run(run func(ctx context.Context, in *QueryProposersRequest, opts ...grpc.CallOption)) *MockQueryClient_Proposers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *QueryProposersRequest
		if args[1] != nil {
			arg1 = args[1].(*QueryProposersRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockQueryClient_Proposers_Call) Return(queryProposersResponse *QueryProposersResponse, err error) *MockQueryClient_Proposers_Call {
	_c.Call.Return(queryProposersResponse, err)
	return _c
}

func (_c *MockQueryClient_Proposers_Call) RunAndReturn(run func(ctx context.Context, in *QueryProposersRequest, opts ...grpc.CallOption) (*QueryProposersResponse, error)) *MockQueryClient_Proposers_Call {
	_c.Call.Return(run)
	return _c
}

// Sequencer provides a mock function for the type MockQueryClient
func (_mock *MockQueryClient) Sequencer(ctx context.Context, in *QueryGetSequencerRequest, opts ...grpc.CallOption) (*QueryGetSequencerResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Sequencer")
	}

	var r0 *QueryGetSequencerResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *QueryGetSequencerRequest, ...grpc.CallOption) (*QueryGetSequencerResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *QueryGetSequencerRequest, ...grpc.CallOption) *QueryGetSequencerResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*QueryGetSequencerResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *QueryGetSequencerRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQueryClient_Sequencer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sequencer'
type MockQueryClient_Sequencer_Call struct {
	*mock.Call
}

// Sequencer is a helper method to define mock.On call
//   - ctx context.Context
//   - in *QueryGetSequencerRequest
//   - opts ...grpc.CallOption
func (_e *MockQueryClient_Expecter) Sequencer(ctx interface{}, in interface{}, opts ...interface{}) *MockQueryClient_Sequencer_Call {
	return &MockQueryClient_Sequencer_Call{Call: _e.mock.On("Sequencer",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockQueryClient_Sequencer_Call) Run(run func(ctx context.Context, in *QueryGetSequencerRequest, opts ...grpc.CallOption)) *MockQueryClient_Sequencer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *QueryGetSequencerRequest
		if args[1] != nil {
			arg1 = args[1].(*QueryGetSequencerRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockQueryClient_Sequencer_Call) Return(queryGetSequencerResponse *QueryGetSequencerResponse, err error) *MockQueryClient_Sequencer_Call {
	_c.Call.Return(queryGetSequencerResponse, err)
	return _c
}

func (_c *MockQueryClient_Sequencer_Call) RunAndReturn(run func(ctx context.Context, in *QueryGetSequencerRequest, opts ...grpc.CallOption) (*QueryGetSequencerResponse, error)) *MockQueryClient_Sequencer_Call {
	_c.Call.Return(run)
	return _c
}

// Sequencers provides a mock function for the type MockQueryClient
func (_mock *MockQueryClient) Sequencers(ctx context.Context, in *QuerySequencersRequest, opts ...grpc.CallOption) (*QuerySequencersResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Sequencers")
	}

	var r0 *QuerySequencersResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *QuerySequencersRequest, ...grpc.CallOption) (*QuerySequencersResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *QuerySequencersRequest, ...grpc.CallOption) *QuerySequencersResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*QuerySequencersResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *QuerySequencersRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQueryClient_Sequencers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sequencers'
type MockQueryClient_Sequencers_Call struct {
	*mock.Call
}

// Sequencers is a helper method to define mock.On call
//   - ctx context.Context
//   - in *QuerySequencersRequest
//   - opts ...grpc.CallOption
func (_e *MockQueryClient_Expecter) Sequencers(ctx interface{}, in interface{}, opts ...interface{}) *MockQueryClient_Sequencers_Call {
	return &MockQueryClient_Sequencers_Call{Call: _e.mock.On("Sequencers",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockQueryClient_Sequencers_Call) Run(run func(ctx context.Context, in *QuerySequencersRequest, opts ...grpc.CallOption)) *MockQueryClient_Sequencers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *QuerySequencersRequest
		if args[1] != nil {
			arg1 = args[1].(*QuerySequencersRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockQueryClient_Sequencers_Call) Return(querySequencersResponse *QuerySequencersResponse, err error) *MockQueryClient_Sequencers_Call {
	_c.Call.Return(querySequencersResponse, err)
	return _c
}

func (_c *MockQueryClient_Sequencers_Call) RunAndReturn(run func(ctx context.Context, in *QuerySequencersRequest, opts ...grpc.CallOption) (*QuerySequencersResponse, error)) *MockQueryClient_Sequencers_Call {
	_c.Call.Return(run)
	return _c
}

// SequencersByRollapp provides a mock function for the type MockQueryClient
func (_mock *MockQueryClient) SequencersByRollapp(ctx context.Context, in *QueryGetSequencersByRollappRequest, opts ...grpc.CallOption) (*QueryGetSequencersByRollappResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for SequencersByRollapp")
	}

	var r0 *QueryGetSequencersByRollappResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *QueryGetSequencersByRollappRequest, ...grpc.CallOption) (*QueryGetSequencersByRollappResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *QueryGetSequencersByRollappRequest, ...grpc.CallOption) *QueryGetSequencersByRollappResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*QueryGetSequencersByRollappResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *QueryGetSequencersByRollappRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQueryClient_SequencersByRollapp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SequencersByRollapp'
type MockQueryClient_SequencersByRollapp_Call struct {
	*mock.Call
}

// SequencersByRollapp is a helper method to define mock.On call
//   - ctx context.Context
//   - in *QueryGetSequencersByRollappRequest
//   - opts ...grpc.CallOption
func (_e *MockQueryClient_Expecter) SequencersByRollapp(ctx interface{}, in interface{}, opts ...interface{}) *MockQueryClient_SequencersByRollapp_Call {
	return &MockQueryClient_SequencersByRollapp_Call{Call: _e.mock.On("SequencersByRollapp",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockQueryClient_SequencersByRollapp_Call) Run(run func(ctx context.Context, in *QueryGetSequencersByRollappRequest, opts ...grpc.CallOption)) *MockQueryClient_SequencersByRollapp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *QueryGetSequencersByRollappRequest
		if args[1] != nil {
			arg1 = args[1].(*QueryGetSequencersByRollappRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockQueryClient_SequencersByRollapp_Call) Return(queryGetSequencersByRollappResponse *QueryGetSequencersByRollappResponse, err error) *MockQueryClient_SequencersByRollapp_Call {
	_c.Call.Return(queryGetSequencersByRollappResponse, err)
	return _c
}

func (_c *MockQueryClient_SequencersByRollapp_Call) RunAndReturn(run func(ctx context.Context, in *QueryGetSequencersByRollappRequest, opts ...grpc.CallOption) (*QueryGetSequencersByRollappResponse, error)) *MockQueryClient_SequencersByRollapp_Call {
	_c.Call.Return(run)
	return _c
}

// SequencersByRollappByStatus provides a mock function for the type MockQueryClient
func (_mock *MockQueryClient) SequencersByRollappByStatus(ctx context.Context, in *QueryGetSequencersByRollappByStatusRequest, opts ...grpc.CallOption) (*QueryGetSequencersByRollappByStatusResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for SequencersByRollappByStatus")
	}

	var r0 *QueryGetSequencersByRollappByStatusResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *QueryGetSequencersByRollappByStatusRequest, ...grpc.CallOption) (*QueryGetSequencersByRollappByStatusResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *QueryGetSequencersByRollappByStatusRequest, ...grpc.CallOption) *QueryGetSequencersByRollappByStatusResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*QueryGetSequencersByRollappByStatusResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *QueryGetSequencersByRollappByStatusRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQueryClient_SequencersByRollappByStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SequencersByRollappByStatus'
type MockQueryClient_SequencersByRollappByStatus_Call struct {
	*mock.Call
}

// SequencersByRollappByStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - in *QueryGetSequencersByRollappByStatusRequest
//   - opts ...grpc.CallOption
func (_e *MockQueryClient_Expecter) SequencersByRollappByStatus(ctx interface{}, in interface{}, opts ...interface{}) *MockQueryClient_SequencersByRollappByStatus_Call {
	return &MockQueryClient_SequencersByRollappByStatus_Call{Call: _e.mock.On("SequencersByRollappByStatus",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockQueryClient_SequencersByRollappByStatus_Call) Run(run func(ctx context.Context, in *QueryGetSequencersByRollappByStatusRequest, opts ...grpc.CallOption)) *MockQueryClient_SequencersByRollappByStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *QueryGetSequencersByRollappByStatusRequest
		if args[1] != nil {
			arg1 = args[1].(*QueryGetSequencersByRollappByStatusRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockQueryClient_SequencersByRollappByStatus_Call) Return(queryGetSequencersByRollappByStatusResponse *QueryGetSequencersByRollappByStatusResponse, err error) *MockQueryClient_SequencersByRollappByStatus_Call {
	_c.Call.Return(queryGetSequencersByRollappByStatusResponse, err)
	return _c
}

func (_c *MockQueryClient_SequencersByRollappByStatus_Call) RunAndReturn(run func(ctx context.Context, in *QueryGetSequencersByRollappByStatusRequest, opts ...grpc.CallOption) (*QueryGetSequencersByRollappByStatusResponse, error)) *MockQueryClient_SequencersByRollappByStatus_Call {
	_c.Call.Return(run)
	return _c
}
