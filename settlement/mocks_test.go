// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package settlement

import (
	"github.com/dymensionxyz/dymint/da"
	"github.com/dymensionxyz/dymint/types"
	"github.com/dymensionxyz/dymint/types/pb/dymensionxyz/dymension/rollapp"
	mock "github.com/stretchr/testify/mock"
	"github.com/tendermint/tendermint/libs/pubsub"
)

// NewMockClientI creates a new instance of MockClientI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientI {
	mock := &MockClientI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockClientI is an autogenerated mock type for the ClientI type
type MockClientI struct {
	mock.Mock
}

type MockClientI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientI) EXPECT() *MockClientI_Expecter {
	return &MockClientI_Expecter{mock: &_m.Mock}
}

// GetAllSequencers provides a mock function for the type MockClientI
func (_mock *MockClientI) GetAllSequencers() ([]types.Sequencer, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllSequencers")
	}

	var r0 []types.Sequencer
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]types.Sequencer, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []types.Sequencer); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Sequencer)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientI_GetAllSequencers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllSequencers'
type MockClientI_GetAllSequencers_Call struct {
	*mock.Call
}

// GetAllSequencers is a helper method to define mock.On call
func (_e *MockClientI_Expecter) GetAllSequencers() *MockClientI_GetAllSequencers_Call {
	return &MockClientI_GetAllSequencers_Call{Call: _e.mock.On("GetAllSequencers")}
}

func (_c *MockClientI_GetAllSequencers_Call) Run(run func()) *MockClientI_GetAllSequencers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClientI_GetAllSequencers_Call) Return(sequencers []types.Sequencer, err error) *MockClientI_GetAllSequencers_Call {
	_c.Call.Return(sequencers, err)
	return _c
}

func (_c *MockClientI_GetAllSequencers_Call) RunAndReturn(run func() ([]types.Sequencer, error)) *MockClientI_GetAllSequencers_Call {
	_c.Call.Return(run)
	return _c
}

// GetBatchAtHeight provides a mock function for the type MockClientI
func (_mock *MockClientI) GetBatchAtHeight(index uint64, retry ...bool) (*ResultRetrieveBatch, error) {
	var tmpRet mock.Arguments
	if len(retry) > 0 {
		tmpRet = _mock.Called(index, retry)
	} else {
		tmpRet = _mock.Called(index)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetBatchAtHeight")
	}

	var r0 *ResultRetrieveBatch
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uint64, ...bool) (*ResultRetrieveBatch, error)); ok {
		return returnFunc(index, retry...)
	}
	if returnFunc, ok := ret.Get(0).(func(uint64, ...bool) *ResultRetrieveBatch); ok {
		r0 = returnFunc(index, retry...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ResultRetrieveBatch)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(uint64, ...bool) error); ok {
		r1 = returnFunc(index, retry...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientI_GetBatchAtHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBatchAtHeight'
type MockClientI_GetBatchAtHeight_Call struct {
	*mock.Call
}

// GetBatchAtHeight is a helper method to define mock.On call
//   - index uint64
//   - retry ...bool
func (_e *MockClientI_Expecter) GetBatchAtHeight(index interface{}, retry ...interface{}) *MockClientI_GetBatchAtHeight_Call {
	return &MockClientI_GetBatchAtHeight_Call{Call: _e.mock.On("GetBatchAtHeight",
		append([]interface{}{index}, retry...)...)}
}

func (_c *MockClientI_GetBatchAtHeight_Call) Run(run func(index uint64, retry ...bool)) *MockClientI_GetBatchAtHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uint64
		if args[0] != nil {
			arg0 = args[0].(uint64)
		}
		var arg1 []bool
		var variadicArgs []bool
		if len(args) > 1 {
			variadicArgs = args[1].([]bool)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockClientI_GetBatchAtHeight_Call) Return(resultRetrieveBatch *ResultRetrieveBatch, err error) *MockClientI_GetBatchAtHeight_Call {
	_c.Call.Return(resultRetrieveBatch, err)
	return _c
}

func (_c *MockClientI_GetBatchAtHeight_Call) RunAndReturn(run func(index uint64, retry ...bool) (*ResultRetrieveBatch, error)) *MockClientI_GetBatchAtHeight_Call {
	_c.Call.Return(run)
	return _c
}

// GetBatchAtIndex provides a mock function for the type MockClientI
func (_mock *MockClientI) GetBatchAtIndex(index uint64) (*ResultRetrieveBatch, error) {
	ret := _mock.Called(index)

	if len(ret) == 0 {
		panic("no return value specified for GetBatchAtIndex")
	}

	var r0 *ResultRetrieveBatch
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uint64) (*ResultRetrieveBatch, error)); ok {
		return returnFunc(index)
	}
	if returnFunc, ok := ret.Get(0).(func(uint64) *ResultRetrieveBatch); ok {
		r0 = returnFunc(index)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ResultRetrieveBatch)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = returnFunc(index)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientI_GetBatchAtIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBatchAtIndex'
type MockClientI_GetBatchAtIndex_Call struct {
	*mock.Call
}

// GetBatchAtIndex is a helper method to define mock.On call
//   - index uint64
func (_e *MockClientI_Expecter) GetBatchAtIndex(index interface{}) *MockClientI_GetBatchAtIndex_Call {
	return &MockClientI_GetBatchAtIndex_Call{Call: _e.mock.On("GetBatchAtIndex", index)}
}

func (_c *MockClientI_GetBatchAtIndex_Call) Run(run func(index uint64)) *MockClientI_GetBatchAtIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uint64
		if args[0] != nil {
			arg0 = args[0].(uint64)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClientI_GetBatchAtIndex_Call) Return(resultRetrieveBatch *ResultRetrieveBatch, err error) *MockClientI_GetBatchAtIndex_Call {
	_c.Call.Return(resultRetrieveBatch, err)
	return _c
}

func (_c *MockClientI_GetBatchAtIndex_Call) RunAndReturn(run func(index uint64) (*ResultRetrieveBatch, error)) *MockClientI_GetBatchAtIndex_Call {
	_c.Call.Return(run)
	return _c
}

// GetBondedSequencers provides a mock function for the type MockClientI
func (_mock *MockClientI) GetBondedSequencers() ([]types.Sequencer, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBondedSequencers")
	}

	var r0 []types.Sequencer
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]types.Sequencer, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []types.Sequencer); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Sequencer)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientI_GetBondedSequencers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBondedSequencers'
type MockClientI_GetBondedSequencers_Call struct {
	*mock.Call
}

// GetBondedSequencers is a helper method to define mock.On call
func (_e *MockClientI_Expecter) GetBondedSequencers() *MockClientI_GetBondedSequencers_Call {
	return &MockClientI_GetBondedSequencers_Call{Call: _e.mock.On("GetBondedSequencers")}
}

func (_c *MockClientI_GetBondedSequencers_Call) Run(run func()) *MockClientI_GetBondedSequencers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClientI_GetBondedSequencers_Call) Return(sequencers []types.Sequencer, err error) *MockClientI_GetBondedSequencers_Call {
	_c.Call.Return(sequencers, err)
	return _c
}

func (_c *MockClientI_GetBondedSequencers_Call) RunAndReturn(run func() ([]types.Sequencer, error)) *MockClientI_GetBondedSequencers_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestBatch provides a mock function for the type MockClientI
func (_mock *MockClientI) GetLatestBatch() (*ResultRetrieveBatch, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLatestBatch")
	}

	var r0 *ResultRetrieveBatch
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*ResultRetrieveBatch, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *ResultRetrieveBatch); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ResultRetrieveBatch)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientI_GetLatestBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestBatch'
type MockClientI_GetLatestBatch_Call struct {
	*mock.Call
}

// GetLatestBatch is a helper method to define mock.On call
func (_e *MockClientI_Expecter) GetLatestBatch() *MockClientI_GetLatestBatch_Call {
	return &MockClientI_GetLatestBatch_Call{Call: _e.mock.On("GetLatestBatch")}
}

func (_c *MockClientI_GetLatestBatch_Call) Run(run func()) *MockClientI_GetLatestBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClientI_GetLatestBatch_Call) Return(resultRetrieveBatch *ResultRetrieveBatch, err error) *MockClientI_GetLatestBatch_Call {
	_c.Call.Return(resultRetrieveBatch, err)
	return _c
}

func (_c *MockClientI_GetLatestBatch_Call) RunAndReturn(run func() (*ResultRetrieveBatch, error)) *MockClientI_GetLatestBatch_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestFinalizedHeight provides a mock function for the type MockClientI
func (_mock *MockClientI) GetLatestFinalizedHeight() (uint64, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLatestFinalizedHeight")
	}

	var r0 uint64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (uint64, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() uint64); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(uint64)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientI_GetLatestFinalizedHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestFinalizedHeight'
type MockClientI_GetLatestFinalizedHeight_Call struct {
	*mock.Call
}

// GetLatestFinalizedHeight is a helper method to define mock.On call
func (_e *MockClientI_Expecter) GetLatestFinalizedHeight() *MockClientI_GetLatestFinalizedHeight_Call {
	return &MockClientI_GetLatestFinalizedHeight_Call{Call: _e.mock.On("GetLatestFinalizedHeight")}
}

func (_c *MockClientI_GetLatestFinalizedHeight_Call) Run(run func()) *MockClientI_GetLatestFinalizedHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClientI_GetLatestFinalizedHeight_Call) Return(v uint64, err error) *MockClientI_GetLatestFinalizedHeight_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockClientI_GetLatestFinalizedHeight_Call) RunAndReturn(run func() (uint64, error)) *MockClientI_GetLatestFinalizedHeight_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestHeight provides a mock function for the type MockClientI
func (_mock *MockClientI) GetLatestHeight() (uint64, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLatestHeight")
	}

	var r0 uint64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (uint64, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() uint64); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(uint64)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientI_GetLatestHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestHeight'
type MockClientI_GetLatestHeight_Call struct {
	*mock.Call
}

// GetLatestHeight is a helper method to define mock.On call
func (_e *MockClientI_Expecter) GetLatestHeight() *MockClientI_GetLatestHeight_Call {
	return &MockClientI_GetLatestHeight_Call{Call: _e.mock.On("GetLatestHeight")}
}

func (_c *MockClientI_GetLatestHeight_Call) Run(run func()) *MockClientI_GetLatestHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClientI_GetLatestHeight_Call) Return(v uint64, err error) *MockClientI_GetLatestHeight_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockClientI_GetLatestHeight_Call) RunAndReturn(run func() (uint64, error)) *MockClientI_GetLatestHeight_Call {
	_c.Call.Return(run)
	return _c
}

// GetNextProposer provides a mock function for the type MockClientI
func (_mock *MockClientI) GetNextProposer() (*types.Sequencer, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNextProposer")
	}

	var r0 *types.Sequencer
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*types.Sequencer, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *types.Sequencer); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Sequencer)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientI_GetNextProposer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNextProposer'
type MockClientI_GetNextProposer_Call struct {
	*mock.Call
}

// GetNextProposer is a helper method to define mock.On call
func (_e *MockClientI_Expecter) GetNextProposer() *MockClientI_GetNextProposer_Call {
	return &MockClientI_GetNextProposer_Call{Call: _e.mock.On("GetNextProposer")}
}

func (_c *MockClientI_GetNextProposer_Call) Run(run func()) *MockClientI_GetNextProposer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClientI_GetNextProposer_Call) Return(sequencer *types.Sequencer, err error) *MockClientI_GetNextProposer_Call {
	_c.Call.Return(sequencer, err)
	return _c
}

func (_c *MockClientI_GetNextProposer_Call) RunAndReturn(run func() (*types.Sequencer, error)) *MockClientI_GetNextProposer_Call {
	_c.Call.Return(run)
	return _c
}

// GetObsoleteDrs provides a mock function for the type MockClientI
func (_mock *MockClientI) GetObsoleteDrs() ([]uint32, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetObsoleteDrs")
	}

	var r0 []uint32
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]uint32, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []uint32); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uint32)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientI_GetObsoleteDrs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetObsoleteDrs'
type MockClientI_GetObsoleteDrs_Call struct {
	*mock.Call
}

// GetObsoleteDrs is a helper method to define mock.On call
func (_e *MockClientI_Expecter) GetObsoleteDrs() *MockClientI_GetObsoleteDrs_Call {
	return &MockClientI_GetObsoleteDrs_Call{Call: _e.mock.On("GetObsoleteDrs")}
}

func (_c *MockClientI_GetObsoleteDrs_Call) Run(run func()) *MockClientI_GetObsoleteDrs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClientI_GetObsoleteDrs_Call) Return(uint32s []uint32, err error) *MockClientI_GetObsoleteDrs_Call {
	_c.Call.Return(uint32s, err)
	return _c
}

func (_c *MockClientI_GetObsoleteDrs_Call) RunAndReturn(run func() ([]uint32, error)) *MockClientI_GetObsoleteDrs_Call {
	_c.Call.Return(run)
	return _c
}

// GetProposerAtHeight provides a mock function for the type MockClientI
func (_mock *MockClientI) GetProposerAtHeight(height int64) (*types.Sequencer, error) {
	ret := _mock.Called(height)

	if len(ret) == 0 {
		panic("no return value specified for GetProposerAtHeight")
	}

	var r0 *types.Sequencer
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int64) (*types.Sequencer, error)); ok {
		return returnFunc(height)
	}
	if returnFunc, ok := ret.Get(0).(func(int64) *types.Sequencer); ok {
		r0 = returnFunc(height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Sequencer)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int64) error); ok {
		r1 = returnFunc(height)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientI_GetProposerAtHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProposerAtHeight'
type MockClientI_GetProposerAtHeight_Call struct {
	*mock.Call
}

// GetProposerAtHeight is a helper method to define mock.On call
//   - height int64
func (_e *MockClientI_Expecter) GetProposerAtHeight(height interface{}) *MockClientI_GetProposerAtHeight_Call {
	return &MockClientI_GetProposerAtHeight_Call{Call: _e.mock.On("GetProposerAtHeight", height)}
}

func (_c *MockClientI_GetProposerAtHeight_Call) Run(run func(height int64)) *MockClientI_GetProposerAtHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int64
		if args[0] != nil {
			arg0 = args[0].(int64)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClientI_GetProposerAtHeight_Call) Return(sequencer *types.Sequencer, err error) *MockClientI_GetProposerAtHeight_Call {
	_c.Call.Return(sequencer, err)
	return _c
}

func (_c *MockClientI_GetProposerAtHeight_Call) RunAndReturn(run func(height int64) (*types.Sequencer, error)) *MockClientI_GetProposerAtHeight_Call {
	_c.Call.Return(run)
	return _c
}

// GetRollapp provides a mock function for the type MockClientI
func (_mock *MockClientI) GetRollapp() (*types.Rollapp, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRollapp")
	}

	var r0 *types.Rollapp
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*types.Rollapp, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *types.Rollapp); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Rollapp)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientI_GetRollapp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRollapp'
type MockClientI_GetRollapp_Call struct {
	*mock.Call
}

// GetRollapp is a helper method to define mock.On call
func (_e *MockClientI_Expecter) GetRollapp() *MockClientI_GetRollapp_Call {
	return &MockClientI_GetRollapp_Call{Call: _e.mock.On("GetRollapp")}
}

func (_c *MockClientI_GetRollapp_Call) Run(run func()) *MockClientI_GetRollapp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClientI_GetRollapp_Call) Return(rollapp *types.Rollapp, err error) *MockClientI_GetRollapp_Call {
	_c.Call.Return(rollapp, err)
	return _c
}

func (_c *MockClientI_GetRollapp_Call) RunAndReturn(run func() (*types.Rollapp, error)) *MockClientI_GetRollapp_Call {
	_c.Call.Return(run)
	return _c
}

// GetSequencerByAddress provides a mock function for the type MockClientI
func (_mock *MockClientI) GetSequencerByAddress(address string) (types.Sequencer, error) {
	ret := _mock.Called(address)

	if len(ret) == 0 {
		panic("no return value specified for GetSequencerByAddress")
	}

	var r0 types.Sequencer
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (types.Sequencer, error)); ok {
		return returnFunc(address)
	}
	if returnFunc, ok := ret.Get(0).(func(string) types.Sequencer); ok {
		r0 = returnFunc(address)
	} else {
		r0 = ret.Get(0).(types.Sequencer)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(address)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientI_GetSequencerByAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSequencerByAddress'
type MockClientI_GetSequencerByAddress_Call struct {
	*mock.Call
}

// GetSequencerByAddress is a helper method to define mock.On call
//   - address string
func (_e *MockClientI_Expecter) GetSequencerByAddress(address interface{}) *MockClientI_GetSequencerByAddress_Call {
	return &MockClientI_GetSequencerByAddress_Call{Call: _e.mock.On("GetSequencerByAddress", address)}
}

func (_c *MockClientI_GetSequencerByAddress_Call) Run(run func(address string)) *MockClientI_GetSequencerByAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClientI_GetSequencerByAddress_Call) Return(sequencer types.Sequencer, err error) *MockClientI_GetSequencerByAddress_Call {
	_c.Call.Return(sequencer, err)
	return _c
}

func (_c *MockClientI_GetSequencerByAddress_Call) RunAndReturn(run func(address string) (types.Sequencer, error)) *MockClientI_GetSequencerByAddress_Call {
	_c.Call.Return(run)
	return _c
}

// GetSignerBalance provides a mock function for the type MockClientI
func (_mock *MockClientI) GetSignerBalance() (types.Balance, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSignerBalance")
	}

	var r0 types.Balance
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (types.Balance, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() types.Balance); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(types.Balance)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientI_GetSignerBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSignerBalance'
type MockClientI_GetSignerBalance_Call struct {
	*mock.Call
}

// GetSignerBalance is a helper method to define mock.On call
func (_e *MockClientI_Expecter) GetSignerBalance() *MockClientI_GetSignerBalance_Call {
	return &MockClientI_GetSignerBalance_Call{Call: _e.mock.On("GetSignerBalance")}
}

func (_c *MockClientI_GetSignerBalance_Call) Run(run func()) *MockClientI_GetSignerBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClientI_GetSignerBalance_Call) Return(balance types.Balance, err error) *MockClientI_GetSignerBalance_Call {
	_c.Call.Return(balance, err)
	return _c
}

func (_c *MockClientI_GetSignerBalance_Call) RunAndReturn(run func() (types.Balance, error)) *MockClientI_GetSignerBalance_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function for the type MockClientI
func (_mock *MockClientI) Init(config Config, rollappId string, pubsub1 *pubsub.Server, logger types.Logger, options ...Option) error {
	var tmpRet mock.Arguments
	if len(options) > 0 {
		tmpRet = _mock.Called(config, rollappId, pubsub1, logger, options)
	} else {
		tmpRet = _mock.Called(config, rollappId, pubsub1, logger)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(Config, string, *pubsub.Server, types.Logger, ...Option) error); ok {
		r0 = returnFunc(config, rollappId, pubsub1, logger, options...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClientI_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockClientI_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - config Config
//   - rollappId string
//   - pubsub1 *pubsub.Server
//   - logger types.Logger
//   - options ...Option
func (_e *MockClientI_Expecter) Init(config interface{}, rollappId interface{}, pubsub1 interface{}, logger interface{}, options ...interface{}) *MockClientI_Init_Call {
	return &MockClientI_Init_Call{Call: _e.mock.On("Init",
		append([]interface{}{config, rollappId, pubsub1, logger}, options...)...)}
}

func (_c *MockClientI_Init_Call) Run(run func(config Config, rollappId string, pubsub1 *pubsub.Server, logger types.Logger, options ...Option)) *MockClientI_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 Config
		if args[0] != nil {
			arg0 = args[0].(Config)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *pubsub.Server
		if args[2] != nil {
			arg2 = args[2].(*pubsub.Server)
		}
		var arg3 types.Logger
		if args[3] != nil {
			arg3 = args[3].(types.Logger)
		}
		var arg4 []Option
		var variadicArgs []Option
		if len(args) > 4 {
			variadicArgs = args[4].([]Option)
		}
		arg4 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4...,
		)
	})
	return _c
}

func (_c *MockClientI_Init_Call) Return(err error) *MockClientI_Init_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClientI_Init_Call) RunAndReturn(run func(config Config, rollappId string, pubsub1 *pubsub.Server, logger types.Logger, options ...Option) error) *MockClientI_Init_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function for the type MockClientI
func (_mock *MockClientI) Start() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClientI_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockClientI_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *MockClientI_Expecter) Start() *MockClientI_Start_Call {
	return &MockClientI_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *MockClientI_Start_Call) Run(run func()) *MockClientI_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClientI_Start_Call) Return(err error) *MockClientI_Start_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClientI_Start_Call) RunAndReturn(run func() error) *MockClientI_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type MockClientI
func (_mock *MockClientI) Stop() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClientI_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockClientI_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockClientI_Expecter) Stop() *MockClientI_Stop_Call {
	return &MockClientI_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockClientI_Stop_Call) Run(run func()) *MockClientI_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClientI_Stop_Call) Return(err error) *MockClientI_Stop_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClientI_Stop_Call) RunAndReturn(run func() error) *MockClientI_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// SubmitBatch provides a mock function for the type MockClientI
func (_mock *MockClientI) SubmitBatch(batch *types.Batch, daClient da.Client, daResult *da.ResultSubmitBatch) error {
	ret := _mock.Called(batch, daClient, daResult)

	if len(ret) == 0 {
		panic("no return value specified for SubmitBatch")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*types.Batch, da.Client, *da.ResultSubmitBatch) error); ok {
		r0 = returnFunc(batch, daClient, daResult)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClientI_SubmitBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubmitBatch'
type MockClientI_SubmitBatch_Call struct {
	*mock.Call
}

// SubmitBatch is a helper method to define mock.On call
//   - batch *types.Batch
//   - daClient da.Client
//   - daResult *da.ResultSubmitBatch
func (_e *MockClientI_Expecter) SubmitBatch(batch interface{}, daClient interface{}, daResult interface{}) *MockClientI_SubmitBatch_Call {
	return &MockClientI_SubmitBatch_Call{Call: _e.mock.On("SubmitBatch", batch, daClient, daResult)}
}

func (_c *MockClientI_SubmitBatch_Call) Run(run func(batch *types.Batch, daClient da.Client, daResult *da.ResultSubmitBatch)) *MockClientI_SubmitBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *types.Batch
		if args[0] != nil {
			arg0 = args[0].(*types.Batch)
		}
		var arg1 da.Client
		if args[1] != nil {
			arg1 = args[1].(da.Client)
		}
		var arg2 *da.ResultSubmitBatch
		if args[2] != nil {
			arg2 = args[2].(*da.ResultSubmitBatch)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockClientI_SubmitBatch_Call) Return(err error) *MockClientI_SubmitBatch_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClientI_SubmitBatch_Call) RunAndReturn(run func(batch *types.Batch, daClient da.Client, daResult *da.ResultSubmitBatch) error) *MockClientI_SubmitBatch_Call {
	_c.Call.Return(run)
	return _c
}

// SubmitTEEAttestation provides a mock function for the type MockClientI
func (_mock *MockClientI) SubmitTEEAttestation(token string, nonce rollapp.TEENonce, finalizedIx uint64, currIx uint64) error {
	ret := _mock.Called(token, nonce, finalizedIx, currIx)

	if len(ret) == 0 {
		panic("no return value specified for SubmitTEEAttestation")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, rollapp.TEENonce, uint64, uint64) error); ok {
		r0 = returnFunc(token, nonce, finalizedIx, currIx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClientI_SubmitTEEAttestation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubmitTEEAttestation'
type MockClientI_SubmitTEEAttestation_Call struct {
	*mock.Call
}

// SubmitTEEAttestation is a helper method to define mock.On call
//   - token string
//   - nonce rollapp.TEENonce
//   - finalizedIx uint64
//   - currIx uint64
func (_e *MockClientI_Expecter) SubmitTEEAttestation(token interface{}, nonce interface{}, finalizedIx interface{}, currIx interface{}) *MockClientI_SubmitTEEAttestation_Call {
	return &MockClientI_SubmitTEEAttestation_Call{Call: _e.mock.On("SubmitTEEAttestation", token, nonce, finalizedIx, currIx)}
}

func (_c *MockClientI_SubmitTEEAttestation_Call) Run(run func(token string, nonce rollapp.TEENonce, finalizedIx uint64, currIx uint64)) *MockClientI_SubmitTEEAttestation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 rollapp.TEENonce
		if args[1] != nil {
			arg1 = args[1].(rollapp.TEENonce)
		}
		var arg2 uint64
		if args[2] != nil {
			arg2 = args[2].(uint64)
		}
		var arg3 uint64
		if args[3] != nil {
			arg3 = args[3].(uint64)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockClientI_SubmitTEEAttestation_Call) Return(err error) *MockClientI_SubmitTEEAttestation_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClientI_SubmitTEEAttestation_Call) RunAndReturn(run func(token string, nonce rollapp.TEENonce, finalizedIx uint64, currIx uint64) error) *MockClientI_SubmitTEEAttestation_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateGenesisBridgeData provides a mock function for the type MockClientI
func (_mock *MockClientI) ValidateGenesisBridgeData(data rollapp.GenesisBridgeData) error {
	ret := _mock.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for ValidateGenesisBridgeData")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(rollapp.GenesisBridgeData) error); ok {
		r0 = returnFunc(data)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClientI_ValidateGenesisBridgeData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateGenesisBridgeData'
type MockClientI_ValidateGenesisBridgeData_Call struct {
	*mock.Call
}

// ValidateGenesisBridgeData is a helper method to define mock.On call
//   - data rollapp.GenesisBridgeData
func (_e *MockClientI_Expecter) ValidateGenesisBridgeData(data interface{}) *MockClientI_ValidateGenesisBridgeData_Call {
	return &MockClientI_ValidateGenesisBridgeData_Call{Call: _e.mock.On("ValidateGenesisBridgeData", data)}
}

func (_c *MockClientI_ValidateGenesisBridgeData_Call) Run(run func(data rollapp.GenesisBridgeData)) *MockClientI_ValidateGenesisBridgeData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 rollapp.GenesisBridgeData
		if args[0] != nil {
			arg0 = args[0].(rollapp.GenesisBridgeData)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClientI_ValidateGenesisBridgeData_Call) Return(err error) *MockClientI_ValidateGenesisBridgeData_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClientI_ValidateGenesisBridgeData_Call) RunAndReturn(run func(data rollapp.GenesisBridgeData) error) *MockClientI_ValidateGenesisBridgeData_Call {
	_c.Call.Return(run)
	return _c
}
