// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: sl.proto

package settlement

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MockSL_GetIndex_FullMethodName = "/settlement.MockSL/GetIndex"
	MockSL_SetIndex_FullMethodName = "/settlement.MockSL/SetIndex"
	MockSL_SetBatch_FullMethodName = "/settlement.MockSL/SetBatch"
	MockSL_GetBatch_FullMethodName = "/settlement.MockSL/GetBatch"
)

// MockSLClient is the client API for MockSL service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MockSLClient interface {
	// Sends a greeting
	GetIndex(ctx context.Context, in *SLGetIndexRequest, opts ...grpc.CallOption) (*SLGetIndexReply, error)
	SetIndex(ctx context.Context, in *SLSetIndexRequest, opts ...grpc.CallOption) (*SLSetIndexResult, error)
	SetBatch(ctx context.Context, in *SLSetBatchRequest, opts ...grpc.CallOption) (*SLSetBatchReply, error)
	GetBatch(ctx context.Context, in *SLGetBatchRequest, opts ...grpc.CallOption) (*SLGetBatchReply, error)
}

type mockSLClient struct {
	cc grpc.ClientConnInterface
}

func NewMockSLClient(cc grpc.ClientConnInterface) MockSLClient {
	return &mockSLClient{cc}
}

func (c *mockSLClient) GetIndex(ctx context.Context, in *SLGetIndexRequest, opts ...grpc.CallOption) (*SLGetIndexReply, error) {
	out := new(SLGetIndexReply)
	err := c.cc.Invoke(ctx, MockSL_GetIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mockSLClient) SetIndex(ctx context.Context, in *SLSetIndexRequest, opts ...grpc.CallOption) (*SLSetIndexResult, error) {
	out := new(SLSetIndexResult)
	err := c.cc.Invoke(ctx, MockSL_SetIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mockSLClient) SetBatch(ctx context.Context, in *SLSetBatchRequest, opts ...grpc.CallOption) (*SLSetBatchReply, error) {
	out := new(SLSetBatchReply)
	err := c.cc.Invoke(ctx, MockSL_SetBatch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mockSLClient) GetBatch(ctx context.Context, in *SLGetBatchRequest, opts ...grpc.CallOption) (*SLGetBatchReply, error) {
	out := new(SLGetBatchReply)
	err := c.cc.Invoke(ctx, MockSL_GetBatch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MockSLServer is the server API for MockSL service.
// All implementations must embed UnimplementedMockSLServer
// for forward compatibility
type MockSLServer interface {
	// Sends a greeting
	GetIndex(context.Context, *SLGetIndexRequest) (*SLGetIndexReply, error)
	SetIndex(context.Context, *SLSetIndexRequest) (*SLSetIndexResult, error)
	SetBatch(context.Context, *SLSetBatchRequest) (*SLSetBatchReply, error)
	GetBatch(context.Context, *SLGetBatchRequest) (*SLGetBatchReply, error)
	mustEmbedUnimplementedMockSLServer()
}

// UnimplementedMockSLServer must be embedded to have forward compatible implementations.
type UnimplementedMockSLServer struct {
}

func (UnimplementedMockSLServer) GetIndex(context.Context, *SLGetIndexRequest) (*SLGetIndexReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIndex not implemented")
}
func (UnimplementedMockSLServer) SetIndex(context.Context, *SLSetIndexRequest) (*SLSetIndexResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetIndex not implemented")
}
func (UnimplementedMockSLServer) SetBatch(context.Context, *SLSetBatchRequest) (*SLSetBatchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBatch not implemented")
}
func (UnimplementedMockSLServer) GetBatch(context.Context, *SLGetBatchRequest) (*SLGetBatchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBatch not implemented")
}
func (UnimplementedMockSLServer) mustEmbedUnimplementedMockSLServer() {}

// UnsafeMockSLServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MockSLServer will
// result in compilation errors.
type UnsafeMockSLServer interface {
	mustEmbedUnimplementedMockSLServer()
}

func RegisterMockSLServer(s grpc.ServiceRegistrar, srv MockSLServer) {
	s.RegisterService(&MockSL_ServiceDesc, srv)
}

func _MockSL_GetIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SLGetIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockSLServer).GetIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MockSL_GetIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockSLServer).GetIndex(ctx, req.(*SLGetIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MockSL_SetIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SLSetIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockSLServer).SetIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MockSL_SetIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockSLServer).SetIndex(ctx, req.(*SLSetIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MockSL_SetBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SLSetBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockSLServer).SetBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MockSL_SetBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockSLServer).SetBatch(ctx, req.(*SLSetBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MockSL_GetBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SLGetBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockSLServer).GetBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MockSL_GetBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockSLServer).GetBatch(ctx, req.(*SLGetBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MockSL_ServiceDesc is the grpc.ServiceDesc for MockSL service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MockSL_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "settlement.MockSL",
	HandlerType: (*MockSLServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIndex",
			Handler:    _MockSL_GetIndex_Handler,
		},
		{
			MethodName: "SetIndex",
			Handler:    _MockSL_SetIndex_Handler,
		},
		{
			MethodName: "SetBatch",
			Handler:    _MockSL_SetBatch_Handler,
		},
		{
			MethodName: "GetBatch",
			Handler:    _MockSL_GetBatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sl.proto",
}
